/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: crypto_certificates.proto */

#ifndef PROTOBUF_C_crypto_5fcertificates_2eproto__INCLUDED
#define PROTOBUF_C_crypto_5fcertificates_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Certificate Certificate;
typedef struct _ServerCertificate ServerCertificate;
typedef struct _IdentityCertificate IdentityCertificate;
typedef struct _SenderCertificate SenderCertificate;


/* --- enums --- */


/* --- messages --- */

/*
 *both KeyCertificate and IdentityCertificate are lift-out from the original containing messages ServerCertificate and SenderCertificate,
 *respectively, because current protobuf generator won't generate separate packing function unless they are defined standalone
 */
struct  _Certificate
{
  ProtobufCMessage base;
  /*
   *to facilitate future revocation of keys stored at client end
   */
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
};
#define CERTIFICATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&certificate__descriptor) \
    , 0, 0, 0, {0,NULL} }


struct  _ServerCertificate
{
  ProtobufCMessage base;
  /*
   *    message Certificate {
   *        optional uint32 id  = 1; //to facilitate future revocation of keys stored at client end
   *        optional bytes  key = 2;
   *    }
   */
  /*
   *KeyCertificate
   */
  protobuf_c_boolean has_certificate;
  ProtobufCBinaryData certificate;
  protobuf_c_boolean has_signature;
  ProtobufCBinaryData signature;
};
#define SERVER_CERTIFICATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&server_certificate__descriptor) \
    , 0, {0,NULL}, 0, {0,NULL} }


struct  _IdentityCertificate
{
  ProtobufCMessage base;
  char *sender;
  protobuf_c_boolean has_senderdevice;
  uint32_t senderdevice;
  protobuf_c_boolean has_expires;
  uint64_t expires;
  protobuf_c_boolean has_identitykey;
  ProtobufCBinaryData identitykey;
  ServerCertificate *signer;
};
#define IDENTITY_CERTIFICATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&identity_certificate__descriptor) \
    , NULL, 0, 0, 0, 0, 0, {0,NULL}, NULL }


struct  _SenderCertificate
{
  ProtobufCMessage base;
  protobuf_c_boolean has_certificate;
  ProtobufCBinaryData certificate;
  protobuf_c_boolean has_signature;
  ProtobufCBinaryData signature;
};
#define SENDER_CERTIFICATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sender_certificate__descriptor) \
    , 0, {0,NULL}, 0, {0,NULL} }


/* Certificate methods */
void   certificate__init
                     (Certificate         *message);
size_t certificate__get_packed_size
                     (const Certificate   *message);
size_t certificate__pack
                     (const Certificate   *message,
                      uint8_t             *out);
size_t certificate__pack_to_buffer
                     (const Certificate   *message,
                      ProtobufCBuffer     *buffer);
Certificate *
       certificate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   certificate__free_unpacked
                     (Certificate *message,
                      ProtobufCAllocator *allocator);
/* ServerCertificate methods */
void   server_certificate__init
                     (ServerCertificate         *message);
size_t server_certificate__get_packed_size
                     (const ServerCertificate   *message);
size_t server_certificate__pack
                     (const ServerCertificate   *message,
                      uint8_t             *out);
size_t server_certificate__pack_to_buffer
                     (const ServerCertificate   *message,
                      ProtobufCBuffer     *buffer);
ServerCertificate *
       server_certificate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   server_certificate__free_unpacked
                     (ServerCertificate *message,
                      ProtobufCAllocator *allocator);
/* IdentityCertificate methods */
void   identity_certificate__init
                     (IdentityCertificate         *message);
size_t identity_certificate__get_packed_size
                     (const IdentityCertificate   *message);
size_t identity_certificate__pack
                     (const IdentityCertificate   *message,
                      uint8_t             *out);
size_t identity_certificate__pack_to_buffer
                     (const IdentityCertificate   *message,
                      ProtobufCBuffer     *buffer);
IdentityCertificate *
       identity_certificate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   identity_certificate__free_unpacked
                     (IdentityCertificate *message,
                      ProtobufCAllocator *allocator);
/* SenderCertificate methods */
void   sender_certificate__init
                     (SenderCertificate         *message);
size_t sender_certificate__get_packed_size
                     (const SenderCertificate   *message);
size_t sender_certificate__pack
                     (const SenderCertificate   *message,
                      uint8_t             *out);
size_t sender_certificate__pack_to_buffer
                     (const SenderCertificate   *message,
                      ProtobufCBuffer     *buffer);
SenderCertificate *
       sender_certificate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sender_certificate__free_unpacked
                     (SenderCertificate *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Certificate_Closure)
                 (const Certificate *message,
                  void *closure_data);
typedef void (*ServerCertificate_Closure)
                 (const ServerCertificate *message,
                  void *closure_data);
typedef void (*IdentityCertificate_Closure)
                 (const IdentityCertificate *message,
                  void *closure_data);
typedef void (*SenderCertificate_Closure)
                 (const SenderCertificate *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor certificate__descriptor;
extern const ProtobufCMessageDescriptor server_certificate__descriptor;
extern const ProtobufCMessageDescriptor identity_certificate__descriptor;
extern const ProtobufCMessageDescriptor sender_certificate__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_crypto_5fcertificates_2eproto__INCLUDED */
