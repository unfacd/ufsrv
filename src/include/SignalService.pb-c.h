/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: SignalService.proto */

#ifndef PROTOBUF_C_SignalService_2eproto__INCLUDED
#define PROTOBUF_C_SignalService_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _CommandHeader CommandHeader;
typedef struct _LocationRecord LocationRecord;
typedef struct _UserRecord UserRecord;
typedef struct _AttachmentRecord AttachmentRecord;
typedef struct _FenceRecord FenceRecord;
typedef struct _FenceRecord__Permission FenceRecord__Permission;
typedef struct _QuotedMessageRecord QuotedMessageRecord;
typedef struct _QuotedMessageRecord__QuotedAttachment QuotedMessageRecord__QuotedAttachment;
typedef struct _PreviewRecord PreviewRecord;
typedef struct _StickerRecord StickerRecord;
typedef struct _MessageRecord MessageRecord;
typedef struct _ContactRecord ContactRecord;
typedef struct _ContactRecord__Name ContactRecord__Name;
typedef struct _ContactRecord__Phone ContactRecord__Phone;
typedef struct _ContactRecord__Email ContactRecord__Email;
typedef struct _ContactRecord__PostalAddress ContactRecord__PostalAddress;
typedef struct _ContactRecord__Avatar ContactRecord__Avatar;
typedef struct _ReceiptCommand ReceiptCommand;
typedef struct _FenceCommand FenceCommand;
typedef struct _LocationCommand LocationCommand;
typedef struct _MessageCommand MessageCommand;
typedef struct _SyncCommand SyncCommand;
typedef struct _UserPreference UserPreference;
typedef struct _FenceUserPreference FenceUserPreference;
typedef struct _UserCommand UserCommand;
typedef struct _CallCommand CallCommand;
typedef struct _CallCommand__Offer CallCommand__Offer;
typedef struct _CallCommand__Answer CallCommand__Answer;
typedef struct _CallCommand__IceUpdate CallCommand__IceUpdate;
typedef struct _CallCommand__Busy CallCommand__Busy;
typedef struct _CallCommand__Hangup CallCommand__Hangup;
typedef struct _FencesNearBy FencesNearBy;
typedef struct _FencesSearch FencesSearch;
typedef struct _FencesSearch__SearchDescriptor FencesSearch__SearchDescriptor;
typedef struct _FencesSearch__RawResultRecord FencesSearch__RawResultRecord;
typedef struct _UfsrvCommandWire UfsrvCommandWire;
typedef struct _Envelope Envelope;
typedef struct _Content Content;
typedef struct _CallMessage CallMessage;
typedef struct _CallMessage__Offer CallMessage__Offer;
typedef struct _CallMessage__Answer CallMessage__Answer;
typedef struct _CallMessage__IceUpdate CallMessage__IceUpdate;
typedef struct _CallMessage__Busy CallMessage__Busy;
typedef struct _CallMessage__Hangup CallMessage__Hangup;
typedef struct _DataMessage DataMessage;
typedef struct _DataMessage__Quote DataMessage__Quote;
typedef struct _DataMessage__Quote__QuotedAttachment DataMessage__Quote__QuotedAttachment;
typedef struct _DataMessage__Contact DataMessage__Contact;
typedef struct _DataMessage__Contact__Name DataMessage__Contact__Name;
typedef struct _DataMessage__Contact__Phone DataMessage__Contact__Phone;
typedef struct _DataMessage__Contact__Email DataMessage__Contact__Email;
typedef struct _DataMessage__Contact__PostalAddress DataMessage__Contact__PostalAddress;
typedef struct _DataMessage__Contact__Avatar DataMessage__Contact__Avatar;
typedef struct _DataMessage__Preview DataMessage__Preview;
typedef struct _DataMessage__Sticker DataMessage__Sticker;
typedef struct _NullMessage NullMessage;
typedef struct _ReceiptMessage ReceiptMessage;
typedef struct _TypingMessage TypingMessage;
typedef struct _Verified Verified;
typedef struct _SyncMessage SyncMessage;
typedef struct _SyncMessage__Sent SyncMessage__Sent;
typedef struct _SyncMessage__Contacts SyncMessage__Contacts;
typedef struct _SyncMessage__Groups SyncMessage__Groups;
typedef struct _SyncMessage__Blocked SyncMessage__Blocked;
typedef struct _SyncMessage__Request SyncMessage__Request;
typedef struct _SyncMessage__Read SyncMessage__Read;
typedef struct _SyncMessage__Configuration SyncMessage__Configuration;
typedef struct _SyncMessage__StickerPackOperation SyncMessage__StickerPackOperation;
typedef struct _AttachmentPointer AttachmentPointer;
typedef struct _GroupContext GroupContext;
typedef struct _ContactDetails ContactDetails;
typedef struct _ContactDetails__Avatar ContactDetails__Avatar;
typedef struct _GroupDetails GroupDetails;
typedef struct _GroupDetails__Avatar GroupDetails__Avatar;


/* --- enums --- */

typedef enum _LocationRecord__Source {
  LOCATION_RECORD__SOURCE__UKNOWN = 0,
  LOCATION_RECORD__SOURCE__SERVER = 1,
  LOCATION_RECORD__SOURCE__USER = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LOCATION_RECORD__SOURCE)
} LocationRecord__Source;
typedef enum _UserRecord__NetState {
  USER_RECORD__NET_STATE__DEREGISTERED = 0,
  USER_RECORD__NET_STATE__ONLINE = 1,
  USER_RECORD__NET_STATE__OFFLINE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(USER_RECORD__NET_STATE)
} UserRecord__NetState;
typedef enum _UserRecord__AvailabilityState {
  USER_RECORD__AVAILABILITY_STATE__AVAILABLE = 0,
  USER_RECORD__AVAILABILITY_STATE__DONT_DISTURB = 1,
  USER_RECORD__AVAILABILITY_STATE__BUSY = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(USER_RECORD__AVAILABILITY_STATE)
} UserRecord__AvailabilityState;
typedef enum _UserRecord__ActivityState {
  USER_RECORD__ACTIVITY_STATE__IDLE = 0,
  USER_RECORD__ACTIVITY_STATE__TYPING = 1,
  USER_RECORD__ACTIVITY_STATE__IMAGING = 2,
  USER_RECORD__ACTIVITY_STATE__CALLING = 3,
  USER_RECORD__ACTIVITY_STATE__VIDEO = 4,
  USER_RECORD__ACTIVITY_STATE__PRIVATE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(USER_RECORD__ACTIVITY_STATE)
} UserRecord__ActivityState;
typedef enum _AttachmentRecord__Flags {
  ATTACHMENT_RECORD__FLAGS__VOICE_MESSAGE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ATTACHMENT_RECORD__FLAGS)
} AttachmentRecord__Flags;
/*
 *ensure AssignFencePermissionForProto() and AssignFencePermissionForProto() are updated whenever enum Type changes
 *client side align with class 'EnumFencePermissions'
 */
typedef enum _FenceRecord__Permission__Type {
  FENCE_RECORD__PERMISSION__TYPE__NONE = 0,
  FENCE_RECORD__PERMISSION__TYPE__PRESENTATION = 1,
  FENCE_RECORD__PERMISSION__TYPE__MEMBERSHIP = 2,
  FENCE_RECORD__PERMISSION__TYPE__MESSAGING = 3,
  FENCE_RECORD__PERMISSION__TYPE__ATTACHING = 4,
  FENCE_RECORD__PERMISSION__TYPE__CALLING = 5,
  FENCE_RECORD__PERMISSION__TYPE__INVALID = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FENCE_RECORD__PERMISSION__TYPE)
} FenceRecord__Permission__Type;
typedef enum _FenceRecord__Permission__ListSemantics {
  FENCE_RECORD__PERMISSION__LIST_SEMANTICS__NONELIST = 0,
  FENCE_RECORD__PERMISSION__LIST_SEMANTICS__WHITELIST = 1,
  FENCE_RECORD__PERMISSION__LIST_SEMANTICS__BLACKLIST = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FENCE_RECORD__PERMISSION__LIST_SEMANTICS)
} FenceRecord__Permission__ListSemantics;
typedef enum _FenceRecord__FenceType {
  FENCE_RECORD__FENCE_TYPE__UNKNOWN = 0,
  FENCE_RECORD__FENCE_TYPE__GEO = 1,
  FENCE_RECORD__FENCE_TYPE__USER = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FENCE_RECORD__FENCE_TYPE)
} FenceRecord__FenceType;
typedef enum _FenceRecord__PrivacyMode {
  /*
   *default
   */
  FENCE_RECORD__PRIVACY_MODE__PUBLIC = 0,
  FENCE_RECORD__PRIVACY_MODE__PRIVATE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FENCE_RECORD__PRIVACY_MODE)
} FenceRecord__PrivacyMode;
typedef enum _FenceRecord__DeliveryMode {
  /*
   *many to many default
   */
  FENCE_RECORD__DELIVERY_MODE__MANY = 0,
  /*
   *owner can send to all, but replies are only seen by owner
   */
  FENCE_RECORD__DELIVERY_MODE__BROADCAST = 1,
  /*
   *owner can send to all, no replies allowed
   */
  FENCE_RECORD__DELIVERY_MODE__BROADCAST_ONEWAY = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FENCE_RECORD__DELIVERY_MODE)
} FenceRecord__DeliveryMode;
typedef enum _FenceRecord__JoinMode {
  /*
   *default anybody can join
   */
  FENCE_RECORD__JOIN_MODE__OPEN = 0,
  /*
   *invite only
   */
  FENCE_RECORD__JOIN_MODE__INVITE = 1,
  /*
   *open but requires key
   */
  FENCE_RECORD__JOIN_MODE__OPEN_WITH_KEY = 2,
  FENCE_RECORD__JOIN_MODE__INVITE_WITH_KEY = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FENCE_RECORD__JOIN_MODE)
} FenceRecord__JoinMode;
typedef enum _FenceRecord__LongevityMode {
  FENCE_RECORD__LONGEVITY_MODE__UNTIMED = 0,
  /*
   *read ttl value
   */
  FENCE_RECORD__LONGEVITY_MODE__TIMED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FENCE_RECORD__LONGEVITY_MODE)
} FenceRecord__LongevityMode;
typedef enum _ContactRecord__Phone__Type {
  CONTACT_RECORD__PHONE__TYPE__HOME = 1,
  CONTACT_RECORD__PHONE__TYPE__MOBILE = 2,
  CONTACT_RECORD__PHONE__TYPE__WORK = 3,
  CONTACT_RECORD__PHONE__TYPE__CUSTOM = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTACT_RECORD__PHONE__TYPE)
} ContactRecord__Phone__Type;
typedef enum _ContactRecord__Email__Type {
  CONTACT_RECORD__EMAIL__TYPE__HOME = 1,
  CONTACT_RECORD__EMAIL__TYPE__MOBILE = 2,
  CONTACT_RECORD__EMAIL__TYPE__WORK = 3,
  CONTACT_RECORD__EMAIL__TYPE__CUSTOM = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTACT_RECORD__EMAIL__TYPE)
} ContactRecord__Email__Type;
typedef enum _ContactRecord__PostalAddress__Type {
  CONTACT_RECORD__POSTAL_ADDRESS__TYPE__HOME = 1,
  CONTACT_RECORD__POSTAL_ADDRESS__TYPE__WORK = 2,
  CONTACT_RECORD__POSTAL_ADDRESS__TYPE__CUSTOM = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTACT_RECORD__POSTAL_ADDRESS__TYPE)
} ContactRecord__PostalAddress__Type;
typedef enum _ReceiptCommand__CommandTypes {
  RECEIPT_COMMAND__COMMAND_TYPES__DELIVERY = 0,
  RECEIPT_COMMAND__COMMAND_TYPES__READ = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RECEIPT_COMMAND__COMMAND_TYPES)
} ReceiptCommand__CommandTypes;
typedef enum _ReceiptCommand__Errors {
  RECEIPT_COMMAND__ERRORS__NONE = 0,
  RECEIPT_COMMAND__ERRORS__NOT_ON_SHARELIST = 1,
  RECEIPT_COMMAND__ERRORS__BLOCKED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RECEIPT_COMMAND__ERRORS)
} ReceiptCommand__Errors;
typedef enum _FenceCommand__CommandTypes {
  FENCE_COMMAND__COMMAND_TYPES__JOIN = 0,
  FENCE_COMMAND__COMMAND_TYPES__LEAVE = 1,
  FENCE_COMMAND__COMMAND_TYPES__INVITE = 2,
  FENCE_COMMAND__COMMAND_TYPES__BLOCK = 3,
  FENCE_COMMAND__COMMAND_TYPES__FNAME = 4,
  FENCE_COMMAND__COMMAND_TYPES__BANNER = 5,
  FENCE_COMMAND__COMMAND_TYPES__AVATAR = 6,
  FENCE_COMMAND__COMMAND_TYPES__MAXMEMBERS = 7,
  FENCE_COMMAND__COMMAND_TYPES__TTL = 8,
  FENCE_COMMAND__COMMAND_TYPES__FKEY = 9,
  FENCE_COMMAND__COMMAND_TYPES__TAGS = 11,
  FENCE_COMMAND__COMMAND_TYPES__MAKE = 12,
  /*
   *overall definition sent to users who join fence so they can synch their own view of it
   */
  FENCE_COMMAND__COMMAND_TYPES__STATE = 13,
  FENCE_COMMAND__COMMAND_TYPES__EXPIRY = 14,
  FENCE_COMMAND__COMMAND_TYPES__MUTE = 15,
  /*
   *permission setting command
   */
  FENCE_COMMAND__COMMAND_TYPES__PERMISSION = 16,
  /*
   *fence member's nickname changed
   */
  FENCE_COMMAND__COMMAND_TYPES__NICKNAME = 17,
  /*
   *temporarily evict from group
   */
  FENCE_COMMAND__COMMAND_TYPES__KICK = 18,
  /*
   *fence record completely removed. This server-to-server command
   */
  FENCE_COMMAND__COMMAND_TYPES__DESTRUCT = 19,
  FENCE_COMMAND__COMMAND_TYPES__JOIN_MODE = 10,
  FENCE_COMMAND__COMMAND_TYPES__PRIVACY_MODE = 20,
  FENCE_COMMAND__COMMAND_TYPES__DELIVERY_MODE = 21,
  FENCE_COMMAND__COMMAND_TYPES__PERMISSION_LIST_SEMANTICS = 22
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FENCE_COMMAND__COMMAND_TYPES)
} FenceCommand__CommandTypes;
typedef enum _FenceCommand__Errors {
  FENCE_COMMAND__ERRORS__NONE = 0,
  FENCE_COMMAND__ERRORS__ALREADY_EXISTS = 1,
  /*
   *no permission to text
   */
  FENCE_COMMAND__ERRORS__PERMISSIONS = 2,
  /*
   *no permission to change group attributes
   */
  FENCE_COMMAND__ERRORS__PERMISSIONS_ADMIN = 3,
  /*
   *  	PERMISSIONS_ATTACH	=	4; //no permission to attach
   */
  /*
   *user not member of group
   */
  FENCE_COMMAND__ERRORS__NOT_MEMBER = 5,
  FENCE_COMMAND__ERRORS__GROUP_DOESNT_EXIST = 6,
  FENCE_COMMAND__ERRORS__INVITE_ONLY = 7,
  FENCE_COMMAND__ERRORS__REACHED_CAPACITY = 8,
  FENCE_COMMAND__ERRORS__BANNED = 9,
  FENCE_COMMAND__ERRORS__KEY_PROTECTED = 10,
  FENCE_COMMAND__ERRORS__WRONG_KEY = 11,
  /*
   *only postings from owner are allowed
   */
  FENCE_COMMAND__ERRORS__NO_POSTING_ALLOWED = 12,
  FENCE_COMMAND__ERRORS__MISSING_PARAMETER = 13,
  /*
   *general backend related
   */
  FENCE_COMMAND__ERRORS__EXECUTION_ERROR = 14
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FENCE_COMMAND__ERRORS)
} FenceCommand__Errors;
typedef enum _LocationCommand__CommandTypes {
  /*
   *long/lat vlaues being set both sources
   */
  LOCATION_COMMAND__COMMAND_TYPES__LONGLAT = 0,
  /*
   *address decoded fromlat/lon by server source
   */
  LOCATION_COMMAND__COMMAND_TYPES__ADDRESS_BYS = 1,
  /*
   *ADDRESS BY USER source
   */
  LOCATION_COMMAND__COMMAND_TYPES__ADDRESS_BYU = 2,
  /*
   *both sout=rces
   */
  LOCATION_COMMAND__COMMAND_TYPES__ADDRESS = 3,
  /*
   *add user to location sharing
   */
  LOCATION_COMMAND__COMMAND_TYPES__SHARED = 4,
  /*
   *mute location sharing
   */
  LOCATION_COMMAND__COMMAND_TYPES__MUTED = 5,
  /*
   *change in baseloc assignment
   */
  LOCATION_COMMAND__COMMAND_TYPES__BASELOC = 6,
  /*
   *spoofed by user
   */
  LOCATION_COMMAND__COMMAND_TYPES__SPOOFED = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(LOCATION_COMMAND__COMMAND_TYPES)
} LocationCommand__CommandTypes;
typedef enum _MessageCommand__CommandTypes {
  MESSAGE_COMMAND__COMMAND_TYPES__SAY = 0,
  MESSAGE_COMMAND__COMMAND_TYPES__CONTACTS = 1,
  MESSAGE_COMMAND__COMMAND_TYPES__SHARE = 2,
  MESSAGE_COMMAND__COMMAND_TYPES__LIKE = 3,
  MESSAGE_COMMAND__COMMAND_TYPES__FOLLOW = 4,
  MESSAGE_COMMAND__COMMAND_TYPES__PREVIEW = 5,
  /*
   *unsolicited contact request
   */
  MESSAGE_COMMAND__COMMAND_TYPES__INTRO = 6,
  MESSAGE_COMMAND__COMMAND_TYPES__STICKER = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_COMMAND__COMMAND_TYPES)
} MessageCommand__CommandTypes;
typedef enum _MessageCommand__Errors {
  MESSAGE_COMMAND__ERRORS__NONE = 0,
  /*
   *only postings from owner are allowed
   */
  MESSAGE_COMMAND__ERRORS__NO_POSTING_ALLOWED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_COMMAND__ERRORS)
} MessageCommand__Errors;
typedef enum _MessageCommand__ProtocolType {
  MESSAGE_COMMAND__PROTOCOL_TYPE__UNKNOWN = 0,
  MESSAGE_COMMAND__PROTOCOL_TYPE__CIPHERTEXT = 1,
  MESSAGE_COMMAND__PROTOCOL_TYPE__KEY_EXCHANGE = 2,
  MESSAGE_COMMAND__PROTOCOL_TYPE__PREKEY_BUNDLE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_COMMAND__PROTOCOL_TYPE)
} MessageCommand__ProtocolType;
typedef enum _SyncCommand__CommandTypes {
  SYNC_COMMAND__COMMAND_TYPES__ACKNOWLEDGE = 1,
  SYNC_COMMAND__COMMAND_TYPES__STATUS = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SYNC_COMMAND__COMMAND_TYPES)
} SyncCommand__CommandTypes;
typedef enum _SyncCommand__CommandArgs {
  SYNC_COMMAND__COMMAND_ARGS__NONE = 0,
  SYNC_COMMAND__COMMAND_ARGS__SUCCESS = 1,
  SYNC_COMMAND__COMMAND_ARGS__FAILURE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SYNC_COMMAND__COMMAND_ARGS)
} SyncCommand__CommandArgs;
typedef enum _UserCommand__CommandTypes {
  USER_COMMAND__COMMAND_TYPES__PREFERENCE = 0,
  USER_COMMAND__COMMAND_TYPES__PREFERENCES = 8,
  USER_COMMAND__COMMAND_TYPES__FENCE_PREFERENCE = 7,
  USER_COMMAND__COMMAND_TYPES__FENCE_PREFERENCES = 9,
  /*
   *block somebody
   */
  USER_COMMAND__COMMAND_TYPES__BLOCK = 1,
  /*
   *clean up user from all fences
   */
  USER_COMMAND__COMMAND_TYPES__RESET = 2,
  USER_COMMAND__COMMAND_TYPES__LIKE = 3,
  USER_COMMAND__COMMAND_TYPES__FOLLOW = 4,
  USER_COMMAND__COMMAND_TYPES__DISLIKE = 5,
  USER_COMMAND__COMMAND_TYPES__TAG = 6,
  /*
   *signal protocol type end session
   */
  USER_COMMAND__COMMAND_TYPES__END_SESSION = 11,
  /*
   *requesting user to re-signon
   */
  USER_COMMAND__COMMAND_TYPES__AUTHENTICATE = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(USER_COMMAND__COMMAND_TYPES)
} UserCommand__CommandTypes;
typedef enum _UserCommand__ShareType {
  USER_COMMAND__SHARE_TYPE__PROFILE = 0,
  USER_COMMAND__SHARE_TYPE__LOCATION = 1,
  USER_COMMAND__SHARE_TYPE__CONTACTS = 2,
  USER_COMMAND__SHARE_TYPE__NETSTATE = 3,
  USER_COMMAND__SHARE_TYPE__FRIENDS = 4,
  USER_COMMAND__SHARE_TYPE__BLOCKING = 5,
  USER_COMMAND__SHARE_TYPE__READ_RECEIPT = 6,
  USER_COMMAND__SHARE_TYPE__ACTIVITY_STATE = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(USER_COMMAND__SHARE_TYPE)
} UserCommand__ShareType;
typedef enum _UserCommand__Errors {
  USER_COMMAND__ERRORS__NONE = 0,
  USER_COMMAND__ERRORS__MISSING_PARAMETER = 1,
  USER_COMMAND__ERRORS__NOT_ONLIST = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(USER_COMMAND__ERRORS)
} UserCommand__Errors;
typedef enum _CallCommand__CommandTypes {
  CALL_COMMAND__COMMAND_TYPES__UKNOWN = 0,
  CALL_COMMAND__COMMAND_TYPES__ANSWER = 1,
  CALL_COMMAND__COMMAND_TYPES__ICE_UPDATE = 2,
  CALL_COMMAND__COMMAND_TYPES__BUSY = 3,
  CALL_COMMAND__COMMAND_TYPES__HANGUP = 4,
  CALL_COMMAND__COMMAND_TYPES__OFFER = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CALL_COMMAND__COMMAND_TYPES)
} CallCommand__CommandTypes;
typedef enum _CallCommand__Errors {
  CALL_COMMAND__ERRORS__NONE = 0,
  /*
   *no disallowed to make call: on blocked list
   */
  CALL_COMMAND__ERRORS__BLOCKED = 1,
  /*
   *catch all at this stage
   */
  CALL_COMMAND__ERRORS__RESTRICTED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CALL_COMMAND__ERRORS)
} CallCommand__Errors;
typedef enum _FencesSearch__Type {
  FENCES_SEARCH__TYPE__DEFAULT = 0,
  FENCES_SEARCH__TYPE__FENCE_NAME = 1,
  FENCES_SEARCH__TYPE__FENCE_LOCATION = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FENCES_SEARCH__TYPE)
} FencesSearch__Type;
typedef enum _FencesSearch__Format {
  FENCES_SEARCH__FORMAT__DEFAULT_FORMAT = 0,
  FENCES_SEARCH__FORMAT__RAW = 1,
  FENCES_SEARCH__FORMAT__JSON = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FENCES_SEARCH__FORMAT)
} FencesSearch__Format;
/*
 *IMPORTANT: this should be kept inline with 'enum UfsrvCmdTopicIds' and 'enum UfsrvMsgCommandType'. check ufsrvcmd_broadcast_type.h
 *Also currently device defines this in com/unfacd/android/ufsrvcmd/UfsrvCommand.java
 */
typedef enum _UfsrvCommandWire__UfsrvType {
  UFSRV_COMMAND_WIRE__UFSRV_TYPE__UFSRV_SESSION = 0,
  UFSRV_COMMAND_WIRE__UFSRV_TYPE__UFSRV_FENCE = 1,
  UFSRV_COMMAND_WIRE__UFSRV_TYPE__UFSRV_MESSAGE = 2,
  UFSRV_COMMAND_WIRE__UFSRV_TYPE__UFSRV_LOCATION = 3,
  UFSRV_COMMAND_WIRE__UFSRV_TYPE__UFSRV_USER = 4,
  UFSRV_COMMAND_WIRE__UFSRV_TYPE__UFSRV_CALL = 5,
  UFSRV_COMMAND_WIRE__UFSRV_TYPE__UFSRV_RECEIPT = 6,
  UFSRV_COMMAND_WIRE__UFSRV_TYPE__UFSRV_SYNC = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(UFSRV_COMMAND_WIRE__UFSRV_TYPE)
} UfsrvCommandWire__UfsrvType;
typedef enum _Envelope__Type {
  ENVELOPE__TYPE__UNKNOWN = 0,
  ENVELOPE__TYPE__CIPHERTEXT = 1,
  ENVELOPE__TYPE__KEY_EXCHANGE = 2,
  ENVELOPE__TYPE__PREKEY_BUNDLE = 3,
  ENVELOPE__TYPE__RECEIPT = 5,
  /*
   *AA+ used with type to signal ufsrv semantics
   */
  ENVELOPE__TYPE__UFSRV_COMMAND = 20
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ENVELOPE__TYPE)
} Envelope__Type;
typedef enum _DataMessage__Contact__Phone__Type {
  DATA_MESSAGE__CONTACT__PHONE__TYPE__HOME = 1,
  DATA_MESSAGE__CONTACT__PHONE__TYPE__MOBILE = 2,
  DATA_MESSAGE__CONTACT__PHONE__TYPE__WORK = 3,
  DATA_MESSAGE__CONTACT__PHONE__TYPE__CUSTOM = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DATA_MESSAGE__CONTACT__PHONE__TYPE)
} DataMessage__Contact__Phone__Type;
typedef enum _DataMessage__Contact__Email__Type {
  DATA_MESSAGE__CONTACT__EMAIL__TYPE__HOME = 1,
  DATA_MESSAGE__CONTACT__EMAIL__TYPE__MOBILE = 2,
  DATA_MESSAGE__CONTACT__EMAIL__TYPE__WORK = 3,
  DATA_MESSAGE__CONTACT__EMAIL__TYPE__CUSTOM = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DATA_MESSAGE__CONTACT__EMAIL__TYPE)
} DataMessage__Contact__Email__Type;
typedef enum _DataMessage__Contact__PostalAddress__Type {
  DATA_MESSAGE__CONTACT__POSTAL_ADDRESS__TYPE__HOME = 1,
  DATA_MESSAGE__CONTACT__POSTAL_ADDRESS__TYPE__WORK = 2,
  DATA_MESSAGE__CONTACT__POSTAL_ADDRESS__TYPE__CUSTOM = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DATA_MESSAGE__CONTACT__POSTAL_ADDRESS__TYPE)
} DataMessage__Contact__PostalAddress__Type;
typedef enum _DataMessage__Flags {
  DATA_MESSAGE__FLAGS__END_SESSION = 1,
  DATA_MESSAGE__FLAGS__EXPIRATION_TIMER_UPDATE = 2,
  DATA_MESSAGE__FLAGS__PROFILE_KEY_UPDATE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DATA_MESSAGE__FLAGS)
} DataMessage__Flags;
typedef enum _ReceiptMessage__Type {
  RECEIPT_MESSAGE__TYPE__DELIVERY = 0,
  RECEIPT_MESSAGE__TYPE__READ = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RECEIPT_MESSAGE__TYPE)
} ReceiptMessage__Type;
typedef enum _TypingMessage__Action {
  TYPING_MESSAGE__ACTION__STARTED = 0,
  TYPING_MESSAGE__ACTION__STOPPED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TYPING_MESSAGE__ACTION)
} TypingMessage__Action;
typedef enum _Verified__State {
  VERIFIED__STATE__DEFAULT = 0,
  VERIFIED__STATE__VERIFIED = 1,
  VERIFIED__STATE__UNVERIFIED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VERIFIED__STATE)
} Verified__State;
typedef enum _SyncMessage__Request__Type {
  SYNC_MESSAGE__REQUEST__TYPE__UNKNOWN = 0,
  SYNC_MESSAGE__REQUEST__TYPE__CONTACTS = 1,
  SYNC_MESSAGE__REQUEST__TYPE__GROUPS = 2,
  SYNC_MESSAGE__REQUEST__TYPE__BLOCKED = 3,
  SYNC_MESSAGE__REQUEST__TYPE__CONFIGURATION = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SYNC_MESSAGE__REQUEST__TYPE)
} SyncMessage__Request__Type;
typedef enum _SyncMessage__StickerPackOperation__Type {
  SYNC_MESSAGE__STICKER_PACK_OPERATION__TYPE__INSTALL = 0,
  SYNC_MESSAGE__STICKER_PACK_OPERATION__TYPE__REMOVE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SYNC_MESSAGE__STICKER_PACK_OPERATION__TYPE)
} SyncMessage__StickerPackOperation__Type;
typedef enum _AttachmentPointer__Flags {
  ATTACHMENT_POINTER__FLAGS__VOICE_MESSAGE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ATTACHMENT_POINTER__FLAGS)
} AttachmentPointer__Flags;
typedef enum _GroupContext__Type {
  GROUP_CONTEXT__TYPE__UNKNOWN = 0,
  GROUP_CONTEXT__TYPE__UPDATE = 1,
  GROUP_CONTEXT__TYPE__DELIVER = 2,
  GROUP_CONTEXT__TYPE__QUIT = 3,
  GROUP_CONTEXT__TYPE__REQUEST_INFO = 4,
  /*
   *AA+
   */
  GROUP_CONTEXT__TYPE__UFSRV = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GROUP_CONTEXT__TYPE)
} GroupContext__Type;
typedef enum _CommandArgs {
  COMMAND_ARGS__SYNCED = 0,
  /*
   *invited by other users
   */
  COMMAND_ARGS__INVITED = 1,
  /*
   *invited based on geo roaming change. contrasts with GEO_BASED
   */
  COMMAND_ARGS__INVITED_GEO = 11,
  /*
   *command was based on previous user request
   */
  COMMAND_ARGS__ACCEPTED = 2,
  COMMAND_ARGS__DENIED = 3,
  COMMAND_ARGS__DEFERRED = 4,
  /*
   *join happened based on automatic location change: roaming mode
   */
  COMMAND_ARGS__GEO_BASED = 5,
  COMMAND_ARGS__REJECTED = 6,
  COMMAND_ARGS__CREATED = 7,
  COMMAND_ARGS__DELETED = 8,
  COMMAND_ARGS__UPDATED = 9,
  COMMAND_ARGS__ADDED = 10,
  COMMAND_ARGS__POSTED = 12,
  COMMAND_ARGS__SET = 13,
  COMMAND_ARGS__UNSET = 14,
  COMMAND_ARGS__ACCEPTED_PARTIAL = 15,
  /*
   *join accepted. join was based on invite (geo or other)
   */
  COMMAND_ARGS__ACCEPTED_INVITE = 16,
  /*
   *removed from invite by non-join event
   */
  COMMAND_ARGS__UNINVITED = 17,
  /*
   *group has ttl value expiring
   */
  COMMAND_ARGS__EXPIRED = 18,
  /*
   *potential arg to leave as group cease to exist, owner left
   */
  COMMAND_ARGS__CEASED = 19,
  /*
   *certain attributes/pref e.g. profile key
   */
  COMMAND_ARGS__SHARED = 20,
  COMMAND_ARGS__UNSHARED = 21,
  /*
   *server instructing clients to send sync request
   */
  COMMAND_ARGS__RESYNC = 22,
  /*
   *server did not change backend state. semantics is related to original command type
   */
  COMMAND_ARGS__UNCHANGED = 23,
  /*
   *request rejected by target user (as opposed to ufsrv rejection)
   */
  COMMAND_ARGS__REJECTED_USER = 24
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(COMMAND_ARGS)
} CommandArgs;
typedef enum _PreferenceType {
  PREFERENCE_TYPE__BOOL = 0,
  PREFERENCE_TYPE__INT = 1,
  PREFERENCE_TYPE__STR = 2,
  PREFERENCE_TYPE__BLOB = 3,
  PREFERENCE_TYPE__MULTI = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PREFERENCE_TYPE)
} PreferenceType;
/*
 *IMPORTANT: align with const UserPreferenceDescriptor prefs_table[] (users.c). First 64 are reserved for bools
 *sharelists are indexed as per 'enum EnumShareListType' in
 */
typedef enum _UserPrefs {
  USER_PREFS__ROAMING_MODE = 0,
  USER_PREFS__RM_WANDERER = 1,
  USER_PREFS__RM_CONQUERER = 2,
  USER_PREFS__RM_JOURNALER = 3,
  USER_PREFS__HOMEBASELOC_NEW_GROUP = 4,
  USER_PREFS__PREF_VIDEO_CALLING = 5,
  USER_PREFS__PREF_6 = 6,
  USER_PREFS__PREF_7 = 7,
  USER_PREFS__PREF_8 = 8,
  USER_PREFS__PREF_9 = 9,
  USER_PREFS__PREF_10 = 10,
  USER_PREFS__PREF_11 = 11,
  USER_PREFS__PREF_12 = 12,
  USER_PREFS__PREF_13 = 13,
  USER_PREFS__PREF_14 = 14,
  USER_PREFS__PREF_15 = 15,
  USER_PREFS__PREF_16 = 16,
  USER_PREFS__PREF_17 = 17,
  USER_PREFS__PREF_18 = 18,
  USER_PREFS__PREF_19 = 19,
  USER_PREFS__PREF_20 = 20,
  USER_PREFS__PREF_21 = 21,
  USER_PREFS__PREF_22 = 22,
  USER_PREFS__PREF_23 = 23,
  USER_PREFS__PREF_24 = 24,
  USER_PREFS__PREF_25 = 25,
  USER_PREFS__PREF_26 = 26,
  USER_PREFS__PREF_27 = 27,
  USER_PREFS__PREF_28 = 28,
  USER_PREFS__PREF_29 = 29,
  USER_PREFS__PREF_30 = 30,
  USER_PREFS__PREF_31 = 31,
  USER_PREFS__PREF_32 = 32,
  USER_PREFS__PREF_33 = 33,
  USER_PREFS__PREF_34 = 34,
  USER_PREFS__PREF_35 = 35,
  USER_PREFS__PREF_36 = 36,
  USER_PREFS__PREF_37 = 37,
  USER_PREFS__PREF_38 = 38,
  USER_PREFS__PREF_39 = 39,
  USER_PREFS__PREF_40 = 40,
  USER_PREFS__PREF_41 = 41,
  USER_PREFS__PREF_42 = 42,
  USER_PREFS__PREF_43 = 43,
  USER_PREFS__PREF_44 = 44,
  USER_PREFS__PREF_45 = 45,
  USER_PREFS__PREF_46 = 46,
  USER_PREFS__PREF_47 = 47,
  USER_PREFS__PREF_48 = 48,
  USER_PREFS__PREF_49 = 49,
  USER_PREFS__PREF_50 = 50,
  USER_PREFS__PREF_51 = 51,
  USER_PREFS__PREF_52 = 52,
  USER_PREFS__PREF_53 = 53,
  USER_PREFS__PREF_54 = 54,
  USER_PREFS__PREF_55 = 55,
  USER_PREFS__PREF_56 = 56,
  USER_PREFS__PREF_57 = 57,
  USER_PREFS__PREF_58 = 58,
  USER_PREFS__PREF_59 = 59,
  USER_PREFS__PREF_60 = 60,
  USER_PREFS__PREF_61 = 61,
  USER_PREFS__PREF_62 = 62,
  /*
   *end of predefined boolean type pref max 64. Align with UserPrefsOffsets in user_type.h
   */
  USER_PREFS__PREF_63 = 63,
  USER_PREFS__NICKNAME = 64,
  USER_PREFS__USERAVATAR = 65,
  /*
   *sharelists 66-81
   */
  USER_PREFS__PROFILE = 66,
  USER_PREFS__LOCATION = 67,
  USER_PREFS__CONTACTS = 68,
  USER_PREFS__NETSTATE = 69,
  USER_PREFS__FRIENDS = 70,
  USER_PREFS__BLOCKING = 71,
  USER_PREFS__READ_RECEIPT = 72,
  USER_PREFS__ACTIVITY_STATE = 73,
  USER_PREFS__SHRLISTPROF74 = 74,
  USER_PREFS__SHRLISTPROF75 = 75,
  USER_PREFS__SHRLISTPROF76 = 76,
  USER_PREFS__SHRLISTPROF77 = 77,
  USER_PREFS__SHRLISTPROF78 = 78,
  USER_PREFS__SHRLISTPROF79 = 79,
  USER_PREFS__SHRLISTPROF80 = 80,
  /*
   *end of reserved sharelists
   */
  USER_PREFS__SHRLISTPROF81 = 81,
  USER_PREFS__E164NUMBER = 82,
  USER_PREFS__REGO_PIN = 83,
  USER_PREFS__BASELOC_ZONE = 84,
  USER_PREFS__GEOLOC_TRIGGER = 85,
  USER_PREFS__UNSOLICITED_CONTACT = 86
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(USER_PREFS)
} UserPrefs;
/*
 *IMPORTANT: align with FenceUserPrefsOffsets and UserPreferenceDescriptor prefs_table[] in fence-state.c. First 64 are reserved for bools
 */
typedef enum _FenceUserPrefs {
  FENCE_USER_PREFS__STICKY_GEOGROUP = 0,
  FENCE_USER_PREFS__PROFILE_SHARING = 1,
  FENCE_USER_PREFS__IGNORING = 2,
  /*
   *end of predefined boolean type pref max 64. Align with FenceUserPrefsOffsets in fence_state.h
   */
  FENCE_USER_PREFS__PREF_FENCE_63 = 63
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FENCE_USER_PREFS)
} FenceUserPrefs;
typedef enum _UnsolicitedContactAction {
  UNSOLICITED_CONTACT_ACTION__BLOCK = 0,
  UNSOLICITED_CONTACT_ACTION__ALLOW = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(UNSOLICITED_CONTACT_ACTION)
} UnsolicitedContactAction;

/* --- messages --- */

struct  _CommandHeader
{
  ProtobufCMessage base;
  char *path;
  /*
   *long form originator userid, including uid
   */
  protobuf_c_boolean has_ufsrvuid;
  ProtobufCBinaryData ufsrvuid;
  /*
   *session id
   */
  protobuf_c_boolean has_cid;
  uint64_t cid;
  /*
   *event id
   */
  protobuf_c_boolean has_eid;
  uint64_t eid;
  /*
   *when was the command sent out
   */
  protobuf_c_boolean has_when;
  uint64_t when;
  /*
   *server id
   */
  char *sid;
  uint32_t command;
  /*
   *extra qualifying arguments for the command
   */
  protobuf_c_boolean has_args;
  uint32_t args;
  /*
   *extra arg to transmit original arg
   */
  protobuf_c_boolean has_args_client;
  CommandArgs args_client;
  /*
   *error code to further contextualise command/args in case coomand generated error
   */
  protobuf_c_boolean has_args_error;
  uint32_t args_error;
  /*
   *arg code originally sent by client that caused the error
   */
  protobuf_c_boolean has_args_error_client;
  uint32_t args_error_client;
  char *uname;
  /*
   *when was the event generated
   */
  protobuf_c_boolean has_when_eid;
  uint64_t when_eid;
  /*
   *client's timestamp. If available sent back to client from their original request. Help with client's local context
   */
  protobuf_c_boolean has_when_client;
  uint64_t when_client;
  char *cookie;
};
#define COMMAND_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&command_header__descriptor) \
    , NULL, 0, {0,NULL}, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, COMMAND_ARGS__SYNCED, 0, 0, 0, 0, NULL, 0, 0, 0, 0, NULL }


struct  _LocationRecord
{
  ProtobufCMessage base;
  double longitude;
  double latitude;
  char *country;
  char *adminarea;
  char *locality;
  char *baseloc;
  LocationRecord__Source source;
};
#define LOCATION_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&location_record__descriptor) \
    , 0, 0, NULL, NULL, NULL, NULL, LOCATION_RECORD__SOURCE__UKNOWN }


struct  _UserRecord
{
  ProtobufCMessage base;
  /*
   *long form userid, including uid
   */
  ProtobufCBinaryData ufsrvuid;
  char *username;
  protobuf_c_boolean has_lastseen;
  uint64_t lastseen;
  protobuf_c_boolean has_profile_key;
  ProtobufCBinaryData profile_key;
  size_t n_fences;
  FenceRecord **fences;
  LocationRecord *location;
  /*
   *user's own profile avatar
   */
  AttachmentRecord *avatar;
  protobuf_c_boolean has_net_status;
  UserRecord__NetState net_status;
  protobuf_c_boolean has_cid;
  uint64_t cid;
  protobuf_c_boolean has_eid;
  uint64_t eid;
  protobuf_c_boolean has_availability_status;
  UserRecord__AvailabilityState availability_status;
  protobuf_c_boolean has_activity_state;
  UserRecord__ActivityState activity_state;
};
#define USER_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_record__descriptor) \
    , {0,NULL}, NULL, 0, 0, 0, {0,NULL}, 0,NULL, NULL, NULL, 0, USER_RECORD__NET_STATE__DEREGISTERED, 0, 0, 0, 0, 0, USER_RECORD__AVAILABILITY_STATE__AVAILABLE, 0, USER_RECORD__ACTIVITY_STATE__IDLE }


struct  _AttachmentRecord
{
  ProtobufCMessage base;
  char *id;
  char *contenttype;
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  protobuf_c_boolean has_size;
  uint32_t size;
  protobuf_c_boolean has_thumbnail;
  ProtobufCBinaryData thumbnail;
  protobuf_c_boolean has_digest;
  ProtobufCBinaryData digest;
  char *filename;
  /*
   *for compatibility with signal's attachment pointer
   */
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_width;
  uint32_t width;
  protobuf_c_boolean has_height;
  uint32_t height;
  char *caption;
};
#define ATTACHMENT_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&attachment_record__descriptor) \
    , NULL, NULL, 0, {0,NULL}, 0, 0, 0, {0,NULL}, 0, {0,NULL}, NULL, 0, 0, 0, 0, 0, 0, NULL }


struct  _FenceRecord__Permission
{
  ProtobufCMessage base;
  FenceRecord__Permission__Type type;
  /*
   *same set of permissions for one or more users
   */
  size_t n_users;
  UserRecord **users;
  protobuf_c_boolean has_list_semantics;
  FenceRecord__Permission__ListSemantics list_semantics;
};
#define FENCE_RECORD__PERMISSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fence_record__permission__descriptor) \
    , FENCE_RECORD__PERMISSION__TYPE__NONE, 0,NULL, 0, FENCE_RECORD__PERMISSION__LIST_SEMANTICS__BLACKLIST }


struct  _FenceRecord
{
  ProtobufCMessage base;
  protobuf_c_boolean has_fid;
  uint64_t fid;
  char *fname;
  size_t n_members;
  UserRecord **members;
  size_t n_invited_members;
  UserRecord **invited_members;
  size_t n_blocked_members;
  UserRecord **blocked_members;
  size_t n_fence_preferences;
  FenceUserPreference **fence_preferences;
  AttachmentRecord *avatar;
  protobuf_c_boolean has_fence_type;
  FenceRecord__FenceType fence_type;
  protobuf_c_boolean has_join_mode;
  FenceRecord__JoinMode join_mode;
  protobuf_c_boolean has_privacy_mode;
  FenceRecord__PrivacyMode privacy_mode;
  protobuf_c_boolean has_delivery_mode;
  FenceRecord__DeliveryMode delivery_mode;
  protobuf_c_boolean has_longevity_mode;
  FenceRecord__LongevityMode longevity_mode;
  FenceRecord__Permission *presentation;
  FenceRecord__Permission *membership;
  FenceRecord__Permission *messaging;
  FenceRecord__Permission *attaching;
  FenceRecord__Permission *calling;
  char *cname;
  LocationRecord *location;
  protobuf_c_boolean has_maxmembers;
  uint32_t maxmembers;
  protobuf_c_boolean has_ttl;
  uint64_t ttl;
  protobuf_c_boolean has_fkey;
  ProtobufCBinaryData fkey;
  protobuf_c_boolean has_usercount;
  uint32_t usercount;
  protobuf_c_boolean has_created;
  uint64_t created;
  protobuf_c_boolean has_destroyed;
  uint64_t destroyed;
  protobuf_c_boolean has_invited_usercount;
  uint32_t invited_usercount;
  protobuf_c_boolean has_eid;
  uint64_t eid;
  protobuf_c_boolean has_owner_uid;
  ProtobufCBinaryData owner_uid;
  protobuf_c_boolean has_invited_when;
  uint64_t invited_when;
  /*
   *userid
   */
  protobuf_c_boolean has_invited_by;
  ProtobufCBinaryData invited_by;
  protobuf_c_boolean has_mute_duration;
  uint64_t mute_duration;
  protobuf_c_boolean has_expire_timer;
  uint64_t expire_timer;
  char *color;
};
#define FENCE_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fence_record__descriptor) \
    , 0, 0, NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, NULL, 0, FENCE_RECORD__FENCE_TYPE__UNKNOWN, 0, FENCE_RECORD__JOIN_MODE__OPEN, 0, FENCE_RECORD__PRIVACY_MODE__PUBLIC, 0, FENCE_RECORD__DELIVERY_MODE__MANY, 0, FENCE_RECORD__LONGEVITY_MODE__UNTIMED, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, 0, 0, 0, {0,NULL}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL}, 0, 0, 0, {0,NULL}, 0, 0, 0, 0, NULL }


struct  _QuotedMessageRecord__QuotedAttachment
{
  ProtobufCMessage base;
  char *contenttype;
  char *filename;
  AttachmentRecord *thumbnail;
};
#define QUOTED_MESSAGE_RECORD__QUOTED_ATTACHMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quoted_message_record__quoted_attachment__descriptor) \
    , NULL, NULL, NULL }


struct  _QuotedMessageRecord
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  char *author;
  char *text;
  size_t n_attachments;
  QuotedMessageRecord__QuotedAttachment **attachments;
};
#define QUOTED_MESSAGE_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&quoted_message_record__descriptor) \
    , 0, 0, NULL, NULL, 0,NULL }


struct  _PreviewRecord
{
  ProtobufCMessage base;
  char *url;
  char *title;
  AttachmentRecord *image;
};
#define PREVIEW_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&preview_record__descriptor) \
    , NULL, NULL, NULL }


struct  _StickerRecord
{
  ProtobufCMessage base;
  protobuf_c_boolean has_packid;
  ProtobufCBinaryData packid;
  protobuf_c_boolean has_packkey;
  ProtobufCBinaryData packkey;
  protobuf_c_boolean has_stickerid;
  uint32_t stickerid;
  AttachmentRecord *data;
};
#define STICKER_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sticker_record__descriptor) \
    , 0, {0,NULL}, 0, {0,NULL}, 0, 0, NULL }


struct  _MessageRecord
{
  ProtobufCMessage base;
  protobuf_c_boolean has_message;
  ProtobufCBinaryData message;
  protobuf_c_boolean has_ttl;
  uint64_t ttl;
  /*
   *todo: these fields are also temporarily exposed at command levels for due to processing semantics constraints (eg. attachments upaloaded after MessageRecord is created
   */
  QuotedMessageRecord *quoted_message;
  size_t n_attachments;
  AttachmentRecord **attachments;
  /*
   *signal protocol type as defined in Envelope.Type
   */
  protobuf_c_boolean has_protocol_type;
  MessageCommand__ProtocolType protocol_type;
};
#define MESSAGE_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_record__descriptor) \
    , 0, {0,NULL}, 0, 0, NULL, 0,NULL, 0, MESSAGE_COMMAND__PROTOCOL_TYPE__UNKNOWN }


struct  _ContactRecord__Name
{
  ProtobufCMessage base;
  char *givenname;
  char *familyname;
  char *prefix;
  char *suffix;
  char *middlename;
  char *displayname;
};
#define CONTACT_RECORD__NAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contact_record__name__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL }


struct  _ContactRecord__Phone
{
  ProtobufCMessage base;
  char *value;
  protobuf_c_boolean has_type;
  ContactRecord__Phone__Type type;
  char *label;
};
#define CONTACT_RECORD__PHONE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contact_record__phone__descriptor) \
    , NULL, 0, CONTACT_RECORD__PHONE__TYPE__HOME, NULL }


struct  _ContactRecord__Email
{
  ProtobufCMessage base;
  char *value;
  protobuf_c_boolean has_type;
  ContactRecord__Email__Type type;
  char *label;
};
#define CONTACT_RECORD__EMAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contact_record__email__descriptor) \
    , NULL, 0, CONTACT_RECORD__EMAIL__TYPE__HOME, NULL }


struct  _ContactRecord__PostalAddress
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  ContactRecord__PostalAddress__Type type;
  char *label;
  char *street;
  char *pobox;
  char *neighborhood;
  char *city;
  char *region;
  char *postcode;
  char *country;
};
#define CONTACT_RECORD__POSTAL_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contact_record__postal_address__descriptor) \
    , 0, CONTACT_RECORD__POSTAL_ADDRESS__TYPE__HOME, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _ContactRecord__Avatar
{
  ProtobufCMessage base;
  AttachmentRecord *avatar;
  protobuf_c_boolean has_isprofile;
  protobuf_c_boolean isprofile;
};
#define CONTACT_RECORD__AVATAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contact_record__avatar__descriptor) \
    , NULL, 0, 0 }


struct  _ContactRecord
{
  ProtobufCMessage base;
  ContactRecord__Name *name;
  size_t n_number;
  ContactRecord__Phone **number;
  size_t n_email;
  ContactRecord__Email **email;
  size_t n_address;
  ContactRecord__PostalAddress **address;
  ContactRecord__Avatar *avatar;
  char *organization;
  protobuf_c_boolean has_ufsrvuid;
  ProtobufCBinaryData ufsrvuid;
};
#define CONTACT_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contact_record__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0,NULL, NULL, NULL, 0, {0,NULL} }


/*
 *Attributes identifying the recipient of the message and meta data on the command
 */
struct  _ReceiptCommand
{
  ProtobufCMessage base;
  CommandHeader *header;
  protobuf_c_boolean has_type;
  ReceiptCommand__CommandTypes type;
  size_t n_timestamp;
  uint64_t *timestamp;
  size_t n_eid;
  uint64_t *eid;
  protobuf_c_boolean has_fid;
  uint64_t fid;
  /*
   *the user for whom receipt is issued (e.g original msg sender)
   */
  protobuf_c_boolean has_uid_originator;
  ProtobufCBinaryData uid_originator;
};
#define RECEIPT_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&receipt_command__descriptor) \
    , NULL, 0, RECEIPT_COMMAND__COMMAND_TYPES__DELIVERY, 0,NULL, 0,NULL, 0, 0, 0, {0,NULL} }


struct  _FenceCommand
{
  ProtobufCMessage base;
  CommandHeader *header;
  size_t n_fences;
  FenceRecord **fences;
  size_t n_attachments;
  AttachmentRecord **attachments;
  /*
   *user who's affected by, or originated this command
   */
  UserRecord *originator;
  UserRecord *invited_by;
  UserRecord *blocked_by;
  protobuf_c_boolean has_type;
  FenceRecord__Permission__Type type;
  /*
   *for commands where subset of users are concerned, for example invitation
   */
  size_t n_rejected;
  UserRecord **rejected;
  /*
   *for commands where subset of users are concerned, for example invitation
   */
  size_t n_accepted;
  UserRecord **accepted;
};
#define FENCE_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fence_command__descriptor) \
    , NULL, 0,NULL, 0,NULL, NULL, NULL, NULL, 0, FENCE_RECORD__PERMISSION__TYPE__NONE, 0,NULL, 0,NULL }


struct  _LocationCommand
{
  ProtobufCMessage base;
  CommandHeader *header;
  LocationRecord *location_by_user;
  LocationRecord *location_by_serv;
  size_t n_sharing_with;
  UserRecord **sharing_with;
  /*
   *the user whose record is being communicated if other than current user
   */
  protobuf_c_boolean has_uid_originator;
  ProtobufCBinaryData uid_originator;
};
#define LOCATION_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&location_command__descriptor) \
    , NULL, NULL, NULL, 0,NULL, 0, {0,NULL} }


struct  _MessageCommand
{
  ProtobufCMessage base;
  CommandHeader *header;
  size_t n_fences;
  FenceRecord **fences;
  size_t n_messages;
  MessageRecord **messages;
  size_t n_attachments;
  AttachmentRecord **attachments;
  QuotedMessageRecord *quoted_message;
  size_t n_preview;
  PreviewRecord **preview;
  StickerRecord *sticker;
  /*
   *contacts sharing message
   */
  size_t n_contacts;
  ContactRecord **contacts;
  /*
   *user who's affected by, or originated this command
   */
  UserRecord *originator;
  size_t n_to;
  UserRecord **to;
  LocationRecord *location;
  /*
   *individual messages can have their own expiry independent of fence setting
   */
  protobuf_c_boolean has_expire_timer;
  uint64_t expire_timer;
};
#define MESSAGE_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_command__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0,NULL, NULL, 0,NULL, NULL, 0,NULL, NULL, 0,NULL, NULL, 0, 0 }


struct  _SyncCommand
{
  ProtobufCMessage base;
  CommandHeader *header;
  protobuf_c_boolean has_type;
  SyncCommand__CommandTypes type;
};
#define SYNC_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_command__descriptor) \
    , NULL, 0, SYNC_COMMAND__COMMAND_TYPES__ACKNOWLEDGE }


struct  _UserPreference
{
  ProtobufCMessage base;
  /*
   *default is bool
   */
  protobuf_c_boolean has_type;
  PreferenceType type;
  /*
   *offset. we are capped to 0-63 reservred for bool
   */
  UserPrefs pref_id;
  /*
   *singular string
   */
  char *values_str;
  /*
   *multi string value
   */
  size_t n_values_str_m;
  char **values_str_m;
  protobuf_c_boolean has_values_int;
  uint64_t values_int;
  /*
   *multi value
   */
  size_t n_values_int_m;
  uint64_t *values_int_m;
  protobuf_c_boolean has_vaues_blob;
  ProtobufCBinaryData vaues_blob;
  protobuf_c_boolean has_vaues_blob_m;
  ProtobufCBinaryData vaues_blob_m;
  /*
   *textual representation of the pref_id
   */
  char *pref_name;
};
#define USER_PREFERENCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_preference__descriptor) \
    , 0, PREFERENCE_TYPE__BOOL, USER_PREFS__ROAMING_MODE, NULL, 0,NULL, 0, 0, 0,NULL, 0, {0,NULL}, 0, {0,NULL}, NULL }


/*
 *private user preferences for a given fence
 */
struct  _FenceUserPreference
{
  ProtobufCMessage base;
  /*
   *default is bool
   */
  protobuf_c_boolean has_type;
  PreferenceType type;
  /*
   *offset. we are capped to 0-63 reservred for bool
   */
  FenceUserPrefs pref_id;
  /*
   *singular string
   */
  char *values_str;
  /*
   *multi string value
   */
  size_t n_values_str_m;
  char **values_str_m;
  protobuf_c_boolean has_values_int;
  uint64_t values_int;
  /*
   *multi value
   */
  size_t n_values_int_m;
  uint64_t *values_int_m;
  protobuf_c_boolean has_vaues_blob;
  ProtobufCBinaryData vaues_blob;
  protobuf_c_boolean has_vaues_blob_m;
  ProtobufCBinaryData vaues_blob_m;
  /*
   *textual representation of the pref_id
   */
  char *pref_name;
};
#define FENCE_USER_PREFERENCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fence_user_preference__descriptor) \
    , 0, PREFERENCE_TYPE__BOOL, FENCE_USER_PREFS__STICKY_GEOGROUP, NULL, 0,NULL, 0, 0, 0,NULL, 0, {0,NULL}, 0, {0,NULL}, NULL }


struct  _UserCommand
{
  ProtobufCMessage base;
  /*
   *for this user sending
   */
  protobuf_c_boolean has_profile_key;
  ProtobufCBinaryData profile_key;
  /*
   *fences affected by this SessionMessage
   */
  size_t n_fences;
  FenceRecord **fences;
  /*
   *fences for which user invited  affected by this SessionMessage
   */
  size_t n_fences_invited;
  FenceRecord **fences_invited;
  /*
   *fences in which user blocked affected by this SessionMessage
   */
  size_t n_fences_blocked;
  FenceRecord **fences_blocked;
  size_t n_prefs;
  UserPreference **prefs;
  /*
   *for each fence -> collection of prefs, complementary to prefs above
   */
  size_t n_fence_prefs;
  FenceUserPreference **fence_prefs;
  CommandHeader *header;
  size_t n_attachments;
  AttachmentRecord **attachments;
  /*
   *the user whose record is being communicated if other than current user
   */
  UserRecord *originator;
  /*
   *users added/removed to/from sharelists
   */
  size_t n_target_list;
  UserRecord **target_list;
  size_t n_contact;
  ContactRecord **contact;
};
#define USER_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_command__descriptor) \
    , 0, {0,NULL}, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, NULL, 0,NULL, NULL, 0,NULL, 0,NULL }


struct  _CallCommand__Offer
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  char *description;
};
#define CALL_COMMAND__OFFER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&call_command__offer__descriptor) \
    , 0, 0, NULL }


struct  _CallCommand__Answer
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  char *description;
};
#define CALL_COMMAND__ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&call_command__answer__descriptor) \
    , 0, 0, NULL }


struct  _CallCommand__IceUpdate
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  char *sdpmid;
  protobuf_c_boolean has_sdpmlineindex;
  uint32_t sdpmlineindex;
  char *sdp;
};
#define CALL_COMMAND__ICE_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&call_command__ice_update__descriptor) \
    , 0, 0, NULL, 0, 0, NULL }


struct  _CallCommand__Busy
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
};
#define CALL_COMMAND__BUSY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&call_command__busy__descriptor) \
    , 0, 0 }


struct  _CallCommand__Hangup
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
};
#define CALL_COMMAND__HANGUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&call_command__hangup__descriptor) \
    , 0, 0 }


struct  _CallCommand
{
  ProtobufCMessage base;
  CommandHeader *header;
  CallCommand__Offer *offer;
  CallCommand__Answer *answer;
  size_t n_iceupdate;
  CallCommand__IceUpdate **iceupdate;
  CallCommand__Hangup *hangup;
  CallCommand__Busy *busy;
  /*
   *user who's affected by, or originated this command
   */
  UserRecord *originator;
  size_t n_to;
  UserRecord **to;
  FenceRecord *fence;
};
#define CALL_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&call_command__descriptor) \
    , NULL, NULL, NULL, 0,NULL, NULL, NULL, NULL, 0,NULL, NULL }


struct  _FencesNearBy
{
  ProtobufCMessage base;
  size_t n_fences;
  FenceRecord **fences;
  /*
   *location to which fences are near
   */
  LocationRecord *location;
};
#define FENCES_NEAR_BY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fences_near_by__descriptor) \
    , 0,NULL, NULL }


struct  _FencesSearch__SearchDescriptor
{
  ProtobufCMessage base;
  char *freeform;
};
#define FENCES_SEARCH__SEARCH_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fences_search__search_descriptor__descriptor) \
    , NULL }


struct  _FencesSearch__RawResultRecord
{
  ProtobufCMessage base;
  char *raw_payload;
};
#define FENCES_SEARCH__RAW_RESULT_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fences_search__raw_result_record__descriptor) \
    , NULL }


struct  _FencesSearch
{
  ProtobufCMessage base;
  protobuf_c_boolean has_search_type;
  FencesSearch__Type search_type;
  protobuf_c_boolean has_search_format;
  FencesSearch__Format search_format;
  size_t n_result;
  FenceRecord **result;
  size_t n_raw_results;
  FencesSearch__RawResultRecord **raw_results;
};
#define FENCES_SEARCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fences_search__descriptor) \
    , 0, FENCES_SEARCH__TYPE__DEFAULT, 0, FENCES_SEARCH__FORMAT__DEFAULT_FORMAT, 0,NULL, 0,NULL }


/*
 *This is encapsulated in device-bound messages
 */
struct  _UfsrvCommandWire
{
  ProtobufCMessage base;
  /*
   *to be removed
   */
  CommandHeader *header;
  UfsrvCommandWire__UfsrvType ufsrvtype;
  FenceCommand *fencecommand;
  UserCommand *usercommand;
  MessageCommand *msgcommand;
  CallCommand *callcommand;
  ReceiptCommand *receiptcommand;
  /*
   *not implemented
   */
  SyncCommand *synccommand;
};
#define UFSRV_COMMAND_WIRE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ufsrv_command_wire__descriptor) \
    , NULL, UFSRV_COMMAND_WIRE__UFSRV_TYPE__UFSRV_SESSION, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Envelope
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  Envelope__Type type;
  /*
   *username (number) of originator
   */
  char *source;
  protobuf_c_boolean has_sourcedevice;
  uint32_t sourcedevice;
  char *relay;
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  /*
   * Contains an encrypted DataMessage
   */
  protobuf_c_boolean has_legacymessage;
  ProtobufCBinaryData legacymessage;
  /*
   * Contains an encrypted Content
   */
  protobuf_c_boolean has_content;
  ProtobufCBinaryData content;
  /*
   *set by server client bound
   */
  UfsrvCommandWire *ufsrvcommand;
};
#define ENVELOPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&envelope__descriptor) \
    , 0, ENVELOPE__TYPE__UNKNOWN, NULL, 0, 0, NULL, 0, 0, 0, {0,NULL}, 0, {0,NULL}, NULL }


struct  _Content
{
  ProtobufCMessage base;
  DataMessage *datamessage;
  SyncMessage *syncmessage;
  CallMessage *callmessage;
  NullMessage *nullmessage;
  ReceiptMessage *receiptmessage;
  TypingMessage *typingmessage;
};
#define CONTENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&content__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL }


struct  _CallMessage__Offer
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  char *description;
};
#define CALL_MESSAGE__OFFER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&call_message__offer__descriptor) \
    , 0, 0, NULL }


struct  _CallMessage__Answer
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  char *description;
};
#define CALL_MESSAGE__ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&call_message__answer__descriptor) \
    , 0, 0, NULL }


struct  _CallMessage__IceUpdate
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  char *sdpmid;
  protobuf_c_boolean has_sdpmlineindex;
  uint32_t sdpmlineindex;
  char *sdp;
};
#define CALL_MESSAGE__ICE_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&call_message__ice_update__descriptor) \
    , 0, 0, NULL, 0, 0, NULL }


struct  _CallMessage__Busy
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
};
#define CALL_MESSAGE__BUSY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&call_message__busy__descriptor) \
    , 0, 0 }


struct  _CallMessage__Hangup
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
};
#define CALL_MESSAGE__HANGUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&call_message__hangup__descriptor) \
    , 0, 0 }


struct  _CallMessage
{
  ProtobufCMessage base;
  CallMessage__Offer *offer;
  CallMessage__Answer *answer;
  size_t n_iceupdate;
  CallMessage__IceUpdate **iceupdate;
  CallMessage__Hangup *hangup;
  CallMessage__Busy *busy;
};
#define CALL_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&call_message__descriptor) \
    , NULL, NULL, 0,NULL, NULL, NULL }


struct  _DataMessage__Quote__QuotedAttachment
{
  ProtobufCMessage base;
  char *contenttype;
  char *filename;
  AttachmentPointer *thumbnail;
};
#define DATA_MESSAGE__QUOTE__QUOTED_ATTACHMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_message__quote__quoted_attachment__descriptor) \
    , NULL, NULL, NULL }


struct  _DataMessage__Quote
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  char *author;
  char *text;
  size_t n_attachments;
  DataMessage__Quote__QuotedAttachment **attachments;
};
#define DATA_MESSAGE__QUOTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_message__quote__descriptor) \
    , 0, 0, NULL, NULL, 0,NULL }


struct  _DataMessage__Contact__Name
{
  ProtobufCMessage base;
  char *givenname;
  char *familyname;
  char *prefix;
  char *suffix;
  char *middlename;
  char *displayname;
};
#define DATA_MESSAGE__CONTACT__NAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_message__contact__name__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL }


struct  _DataMessage__Contact__Phone
{
  ProtobufCMessage base;
  char *value;
  protobuf_c_boolean has_type;
  DataMessage__Contact__Phone__Type type;
  char *label;
};
#define DATA_MESSAGE__CONTACT__PHONE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_message__contact__phone__descriptor) \
    , NULL, 0, DATA_MESSAGE__CONTACT__PHONE__TYPE__HOME, NULL }


struct  _DataMessage__Contact__Email
{
  ProtobufCMessage base;
  char *value;
  protobuf_c_boolean has_type;
  DataMessage__Contact__Email__Type type;
  char *label;
};
#define DATA_MESSAGE__CONTACT__EMAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_message__contact__email__descriptor) \
    , NULL, 0, DATA_MESSAGE__CONTACT__EMAIL__TYPE__HOME, NULL }


struct  _DataMessage__Contact__PostalAddress
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  DataMessage__Contact__PostalAddress__Type type;
  char *label;
  char *street;
  char *pobox;
  char *neighborhood;
  char *city;
  char *region;
  char *postcode;
  char *country;
};
#define DATA_MESSAGE__CONTACT__POSTAL_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_message__contact__postal_address__descriptor) \
    , 0, DATA_MESSAGE__CONTACT__POSTAL_ADDRESS__TYPE__HOME, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _DataMessage__Contact__Avatar
{
  ProtobufCMessage base;
  AttachmentPointer *avatar;
  protobuf_c_boolean has_isprofile;
  protobuf_c_boolean isprofile;
};
#define DATA_MESSAGE__CONTACT__AVATAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_message__contact__avatar__descriptor) \
    , NULL, 0, 0 }


struct  _DataMessage__Contact
{
  ProtobufCMessage base;
  DataMessage__Contact__Name *name;
  size_t n_number;
  DataMessage__Contact__Phone **number;
  size_t n_email;
  DataMessage__Contact__Email **email;
  size_t n_address;
  DataMessage__Contact__PostalAddress **address;
  DataMessage__Contact__Avatar *avatar;
  char *organization;
};
#define DATA_MESSAGE__CONTACT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_message__contact__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0,NULL, NULL, NULL }


struct  _DataMessage__Preview
{
  ProtobufCMessage base;
  char *url;
  char *title;
  AttachmentPointer *image;
};
#define DATA_MESSAGE__PREVIEW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_message__preview__descriptor) \
    , NULL, NULL, NULL }


struct  _DataMessage__Sticker
{
  ProtobufCMessage base;
  protobuf_c_boolean has_packid;
  ProtobufCBinaryData packid;
  protobuf_c_boolean has_packkey;
  ProtobufCBinaryData packkey;
  protobuf_c_boolean has_stickerid;
  uint32_t stickerid;
  AttachmentPointer *data;
};
#define DATA_MESSAGE__STICKER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_message__sticker__descriptor) \
    , 0, {0,NULL}, 0, {0,NULL}, 0, 0, NULL }


struct  _DataMessage
{
  ProtobufCMessage base;
  char *body;
  size_t n_attachments;
  AttachmentPointer **attachments;
  GroupContext *group;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_expiretimer;
  uint32_t expiretimer;
  protobuf_c_boolean has_profilekey;
  ProtobufCBinaryData profilekey;
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  DataMessage__Quote *quote;
  size_t n_contact;
  DataMessage__Contact **contact;
  size_t n_preview;
  DataMessage__Preview **preview;
  DataMessage__Sticker *sticker;
  /*
   *set by client on server bound
   */
  UfsrvCommandWire *ufsrvcommand;
};
#define DATA_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_message__descriptor) \
    , NULL, 0,NULL, NULL, 0, 0, 0, 0, 0, {0,NULL}, 0, 0, NULL, 0,NULL, 0,NULL, NULL, NULL }


struct  _NullMessage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_padding;
  ProtobufCBinaryData padding;
};
#define NULL_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&null_message__descriptor) \
    , 0, {0,NULL} }


struct  _ReceiptMessage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  ReceiptMessage__Type type;
  size_t n_timestamp;
  uint64_t *timestamp;
};
#define RECEIPT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&receipt_message__descriptor) \
    , 0, RECEIPT_MESSAGE__TYPE__DELIVERY, 0,NULL }


struct  _TypingMessage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  protobuf_c_boolean has_action;
  TypingMessage__Action action;
  protobuf_c_boolean has_groupid;
  ProtobufCBinaryData groupid;
};
#define TYPING_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&typing_message__descriptor) \
    , 0, 0, 0, TYPING_MESSAGE__ACTION__STARTED, 0, {0,NULL} }


struct  _Verified
{
  ProtobufCMessage base;
  char *destination;
  protobuf_c_boolean has_identitykey;
  ProtobufCBinaryData identitykey;
  protobuf_c_boolean has_state;
  Verified__State state;
  protobuf_c_boolean has_nullmessage;
  ProtobufCBinaryData nullmessage;
};
#define VERIFIED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&verified__descriptor) \
    , NULL, 0, {0,NULL}, 0, VERIFIED__STATE__DEFAULT, 0, {0,NULL} }


struct  _SyncMessage__Sent
{
  ProtobufCMessage base;
  char *destination;
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  DataMessage *message;
  protobuf_c_boolean has_expirationstarttimestamp;
  uint64_t expirationstarttimestamp;
};
#define SYNC_MESSAGE__SENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_message__sent__descriptor) \
    , NULL, 0, 0, NULL, 0, 0 }


struct  _SyncMessage__Contacts
{
  ProtobufCMessage base;
  AttachmentPointer *blob;
  protobuf_c_boolean has_complete;
  protobuf_c_boolean complete;
};
#define SYNC_MESSAGE__CONTACTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_message__contacts__descriptor) \
    , NULL, 0, 0 }


struct  _SyncMessage__Groups
{
  ProtobufCMessage base;
  AttachmentPointer *blob;
};
#define SYNC_MESSAGE__GROUPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_message__groups__descriptor) \
    , NULL }


struct  _SyncMessage__Blocked
{
  ProtobufCMessage base;
  size_t n_numbers;
  char **numbers;
  size_t n_groupids;
  ProtobufCBinaryData *groupids;
};
#define SYNC_MESSAGE__BLOCKED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_message__blocked__descriptor) \
    , 0,NULL, 0,NULL }


struct  _SyncMessage__Request
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  SyncMessage__Request__Type type;
};
#define SYNC_MESSAGE__REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_message__request__descriptor) \
    , 0, SYNC_MESSAGE__REQUEST__TYPE__UNKNOWN }


struct  _SyncMessage__Read
{
  ProtobufCMessage base;
  char *sender;
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
};
#define SYNC_MESSAGE__READ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_message__read__descriptor) \
    , NULL, 0, 0 }


struct  _SyncMessage__Configuration
{
  ProtobufCMessage base;
  protobuf_c_boolean has_readreceipts;
  protobuf_c_boolean readreceipts;
  protobuf_c_boolean has_unidentifieddeliveryindicators;
  protobuf_c_boolean unidentifieddeliveryindicators;
  protobuf_c_boolean has_typingindicators;
  protobuf_c_boolean typingindicators;
  protobuf_c_boolean has_linkpreviews;
  protobuf_c_boolean linkpreviews;
};
#define SYNC_MESSAGE__CONFIGURATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_message__configuration__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _SyncMessage__StickerPackOperation
{
  ProtobufCMessage base;
  protobuf_c_boolean has_packid;
  ProtobufCBinaryData packid;
  protobuf_c_boolean has_packkey;
  ProtobufCBinaryData packkey;
  protobuf_c_boolean has_type;
  SyncMessage__StickerPackOperation__Type type;
};
#define SYNC_MESSAGE__STICKER_PACK_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_message__sticker_pack_operation__descriptor) \
    , 0, {0,NULL}, 0, {0,NULL}, 0, SYNC_MESSAGE__STICKER_PACK_OPERATION__TYPE__INSTALL }


struct  _SyncMessage
{
  ProtobufCMessage base;
  SyncMessage__Sent *sent;
  SyncMessage__Contacts *contacts;
  SyncMessage__Groups *groups;
  SyncMessage__Request *request;
  size_t n_read;
  SyncMessage__Read **read;
  SyncMessage__Blocked *blocked;
  Verified *verified;
  SyncMessage__Configuration *configuration;
  protobuf_c_boolean has_padding;
  ProtobufCBinaryData padding;
  size_t n_stickerpackoperation;
  SyncMessage__StickerPackOperation **stickerpackoperation;
};
#define SYNC_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sync_message__descriptor) \
    , NULL, NULL, NULL, NULL, 0,NULL, NULL, NULL, NULL, 0, {0,NULL}, 0,NULL }


struct  _AttachmentPointer
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  char *contenttype;
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  protobuf_c_boolean has_size;
  uint32_t size;
  protobuf_c_boolean has_thumbnail;
  ProtobufCBinaryData thumbnail;
  protobuf_c_boolean has_digest;
  ProtobufCBinaryData digest;
  char *filename;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_width;
  uint32_t width;
  protobuf_c_boolean has_height;
  uint32_t height;
  char *caption;
  /*
   *AA+ nonce value at uf
   */
  char *ufid;
};
#define ATTACHMENT_POINTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&attachment_pointer__descriptor) \
    , 0, 0, NULL, 0, {0,NULL}, 0, 0, 0, {0,NULL}, 0, {0,NULL}, NULL, 0, 0, 0, 0, 0, 0, NULL, NULL }


struct  _GroupContext
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  ProtobufCBinaryData id;
  protobuf_c_boolean has_type;
  GroupContext__Type type;
  char *name;
  size_t n_members;
  char **members;
  AttachmentPointer *avatar;
  /*
   *AA+
   */
  FenceCommand *fencemessage;
};
#define GROUP_CONTEXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&group_context__descriptor) \
    , 0, {0,NULL}, 0, GROUP_CONTEXT__TYPE__UNKNOWN, NULL, 0,NULL, NULL, NULL }


struct  _ContactDetails__Avatar
{
  ProtobufCMessage base;
  char *contenttype;
  protobuf_c_boolean has_length;
  uint32_t length;
};
#define CONTACT_DETAILS__AVATAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contact_details__avatar__descriptor) \
    , NULL, 0, 0 }


struct  _ContactDetails
{
  ProtobufCMessage base;
  char *number;
  char *name;
  ContactDetails__Avatar *avatar;
  char *color;
  Verified *verified;
  protobuf_c_boolean has_profilekey;
  ProtobufCBinaryData profilekey;
  protobuf_c_boolean has_blocked;
  protobuf_c_boolean blocked;
  protobuf_c_boolean has_expiretimer;
  uint32_t expiretimer;
};
#define CONTACT_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&contact_details__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0, {0,NULL}, 0, 0, 0, 0 }


struct  _GroupDetails__Avatar
{
  ProtobufCMessage base;
  char *contenttype;
  protobuf_c_boolean has_length;
  uint32_t length;
};
#define GROUP_DETAILS__AVATAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&group_details__avatar__descriptor) \
    , NULL, 0, 0 }


struct  _GroupDetails
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  ProtobufCBinaryData id;
  char *name;
  size_t n_members;
  char **members;
  GroupDetails__Avatar *avatar;
  protobuf_c_boolean has_active;
  protobuf_c_boolean active;
  protobuf_c_boolean has_expiretimer;
  uint32_t expiretimer;
  char *color;
  protobuf_c_boolean has_blocked;
  protobuf_c_boolean blocked;
};
#define GROUP_DETAILS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&group_details__descriptor) \
    , 0, {0,NULL}, NULL, 0,NULL, NULL, 0, 1, 0, 0, NULL, 0, 0 }


/* CommandHeader methods */
void   command_header__init
                     (CommandHeader         *message);
size_t command_header__get_packed_size
                     (const CommandHeader   *message);
size_t command_header__pack
                     (const CommandHeader   *message,
                      uint8_t             *out);
size_t command_header__pack_to_buffer
                     (const CommandHeader   *message,
                      ProtobufCBuffer     *buffer);
CommandHeader *
       command_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   command_header__free_unpacked
                     (CommandHeader *message,
                      ProtobufCAllocator *allocator);
/* LocationRecord methods */
void   location_record__init
                     (LocationRecord         *message);
size_t location_record__get_packed_size
                     (const LocationRecord   *message);
size_t location_record__pack
                     (const LocationRecord   *message,
                      uint8_t             *out);
size_t location_record__pack_to_buffer
                     (const LocationRecord   *message,
                      ProtobufCBuffer     *buffer);
LocationRecord *
       location_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   location_record__free_unpacked
                     (LocationRecord *message,
                      ProtobufCAllocator *allocator);
/* UserRecord methods */
void   user_record__init
                     (UserRecord         *message);
size_t user_record__get_packed_size
                     (const UserRecord   *message);
size_t user_record__pack
                     (const UserRecord   *message,
                      uint8_t             *out);
size_t user_record__pack_to_buffer
                     (const UserRecord   *message,
                      ProtobufCBuffer     *buffer);
UserRecord *
       user_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_record__free_unpacked
                     (UserRecord *message,
                      ProtobufCAllocator *allocator);
/* AttachmentRecord methods */
void   attachment_record__init
                     (AttachmentRecord         *message);
size_t attachment_record__get_packed_size
                     (const AttachmentRecord   *message);
size_t attachment_record__pack
                     (const AttachmentRecord   *message,
                      uint8_t             *out);
size_t attachment_record__pack_to_buffer
                     (const AttachmentRecord   *message,
                      ProtobufCBuffer     *buffer);
AttachmentRecord *
       attachment_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   attachment_record__free_unpacked
                     (AttachmentRecord *message,
                      ProtobufCAllocator *allocator);
/* FenceRecord__Permission methods */
void   fence_record__permission__init
                     (FenceRecord__Permission         *message);
/* FenceRecord methods */
void   fence_record__init
                     (FenceRecord         *message);
size_t fence_record__get_packed_size
                     (const FenceRecord   *message);
size_t fence_record__pack
                     (const FenceRecord   *message,
                      uint8_t             *out);
size_t fence_record__pack_to_buffer
                     (const FenceRecord   *message,
                      ProtobufCBuffer     *buffer);
FenceRecord *
       fence_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fence_record__free_unpacked
                     (FenceRecord *message,
                      ProtobufCAllocator *allocator);
/* QuotedMessageRecord__QuotedAttachment methods */
void   quoted_message_record__quoted_attachment__init
                     (QuotedMessageRecord__QuotedAttachment         *message);
/* QuotedMessageRecord methods */
void   quoted_message_record__init
                     (QuotedMessageRecord         *message);
size_t quoted_message_record__get_packed_size
                     (const QuotedMessageRecord   *message);
size_t quoted_message_record__pack
                     (const QuotedMessageRecord   *message,
                      uint8_t             *out);
size_t quoted_message_record__pack_to_buffer
                     (const QuotedMessageRecord   *message,
                      ProtobufCBuffer     *buffer);
QuotedMessageRecord *
       quoted_message_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   quoted_message_record__free_unpacked
                     (QuotedMessageRecord *message,
                      ProtobufCAllocator *allocator);
/* PreviewRecord methods */
void   preview_record__init
                     (PreviewRecord         *message);
size_t preview_record__get_packed_size
                     (const PreviewRecord   *message);
size_t preview_record__pack
                     (const PreviewRecord   *message,
                      uint8_t             *out);
size_t preview_record__pack_to_buffer
                     (const PreviewRecord   *message,
                      ProtobufCBuffer     *buffer);
PreviewRecord *
       preview_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   preview_record__free_unpacked
                     (PreviewRecord *message,
                      ProtobufCAllocator *allocator);
/* StickerRecord methods */
void   sticker_record__init
                     (StickerRecord         *message);
size_t sticker_record__get_packed_size
                     (const StickerRecord   *message);
size_t sticker_record__pack
                     (const StickerRecord   *message,
                      uint8_t             *out);
size_t sticker_record__pack_to_buffer
                     (const StickerRecord   *message,
                      ProtobufCBuffer     *buffer);
StickerRecord *
       sticker_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sticker_record__free_unpacked
                     (StickerRecord *message,
                      ProtobufCAllocator *allocator);
/* MessageRecord methods */
void   message_record__init
                     (MessageRecord         *message);
size_t message_record__get_packed_size
                     (const MessageRecord   *message);
size_t message_record__pack
                     (const MessageRecord   *message,
                      uint8_t             *out);
size_t message_record__pack_to_buffer
                     (const MessageRecord   *message,
                      ProtobufCBuffer     *buffer);
MessageRecord *
       message_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_record__free_unpacked
                     (MessageRecord *message,
                      ProtobufCAllocator *allocator);
/* ContactRecord__Name methods */
void   contact_record__name__init
                     (ContactRecord__Name         *message);
/* ContactRecord__Phone methods */
void   contact_record__phone__init
                     (ContactRecord__Phone         *message);
/* ContactRecord__Email methods */
void   contact_record__email__init
                     (ContactRecord__Email         *message);
/* ContactRecord__PostalAddress methods */
void   contact_record__postal_address__init
                     (ContactRecord__PostalAddress         *message);
/* ContactRecord__Avatar methods */
void   contact_record__avatar__init
                     (ContactRecord__Avatar         *message);
/* ContactRecord methods */
void   contact_record__init
                     (ContactRecord         *message);
size_t contact_record__get_packed_size
                     (const ContactRecord   *message);
size_t contact_record__pack
                     (const ContactRecord   *message,
                      uint8_t             *out);
size_t contact_record__pack_to_buffer
                     (const ContactRecord   *message,
                      ProtobufCBuffer     *buffer);
ContactRecord *
       contact_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contact_record__free_unpacked
                     (ContactRecord *message,
                      ProtobufCAllocator *allocator);
/* ReceiptCommand methods */
void   receipt_command__init
                     (ReceiptCommand         *message);
size_t receipt_command__get_packed_size
                     (const ReceiptCommand   *message);
size_t receipt_command__pack
                     (const ReceiptCommand   *message,
                      uint8_t             *out);
size_t receipt_command__pack_to_buffer
                     (const ReceiptCommand   *message,
                      ProtobufCBuffer     *buffer);
ReceiptCommand *
       receipt_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   receipt_command__free_unpacked
                     (ReceiptCommand *message,
                      ProtobufCAllocator *allocator);
/* FenceCommand methods */
void   fence_command__init
                     (FenceCommand         *message);
size_t fence_command__get_packed_size
                     (const FenceCommand   *message);
size_t fence_command__pack
                     (const FenceCommand   *message,
                      uint8_t             *out);
size_t fence_command__pack_to_buffer
                     (const FenceCommand   *message,
                      ProtobufCBuffer     *buffer);
FenceCommand *
       fence_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fence_command__free_unpacked
                     (FenceCommand *message,
                      ProtobufCAllocator *allocator);
/* LocationCommand methods */
void   location_command__init
                     (LocationCommand         *message);
size_t location_command__get_packed_size
                     (const LocationCommand   *message);
size_t location_command__pack
                     (const LocationCommand   *message,
                      uint8_t             *out);
size_t location_command__pack_to_buffer
                     (const LocationCommand   *message,
                      ProtobufCBuffer     *buffer);
LocationCommand *
       location_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   location_command__free_unpacked
                     (LocationCommand *message,
                      ProtobufCAllocator *allocator);
/* MessageCommand methods */
void   message_command__init
                     (MessageCommand         *message);
size_t message_command__get_packed_size
                     (const MessageCommand   *message);
size_t message_command__pack
                     (const MessageCommand   *message,
                      uint8_t             *out);
size_t message_command__pack_to_buffer
                     (const MessageCommand   *message,
                      ProtobufCBuffer     *buffer);
MessageCommand *
       message_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_command__free_unpacked
                     (MessageCommand *message,
                      ProtobufCAllocator *allocator);
/* SyncCommand methods */
void   sync_command__init
                     (SyncCommand         *message);
size_t sync_command__get_packed_size
                     (const SyncCommand   *message);
size_t sync_command__pack
                     (const SyncCommand   *message,
                      uint8_t             *out);
size_t sync_command__pack_to_buffer
                     (const SyncCommand   *message,
                      ProtobufCBuffer     *buffer);
SyncCommand *
       sync_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync_command__free_unpacked
                     (SyncCommand *message,
                      ProtobufCAllocator *allocator);
/* UserPreference methods */
void   user_preference__init
                     (UserPreference         *message);
size_t user_preference__get_packed_size
                     (const UserPreference   *message);
size_t user_preference__pack
                     (const UserPreference   *message,
                      uint8_t             *out);
size_t user_preference__pack_to_buffer
                     (const UserPreference   *message,
                      ProtobufCBuffer     *buffer);
UserPreference *
       user_preference__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_preference__free_unpacked
                     (UserPreference *message,
                      ProtobufCAllocator *allocator);
/* FenceUserPreference methods */
void   fence_user_preference__init
                     (FenceUserPreference         *message);
size_t fence_user_preference__get_packed_size
                     (const FenceUserPreference   *message);
size_t fence_user_preference__pack
                     (const FenceUserPreference   *message,
                      uint8_t             *out);
size_t fence_user_preference__pack_to_buffer
                     (const FenceUserPreference   *message,
                      ProtobufCBuffer     *buffer);
FenceUserPreference *
       fence_user_preference__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fence_user_preference__free_unpacked
                     (FenceUserPreference *message,
                      ProtobufCAllocator *allocator);
/* UserCommand methods */
void   user_command__init
                     (UserCommand         *message);
size_t user_command__get_packed_size
                     (const UserCommand   *message);
size_t user_command__pack
                     (const UserCommand   *message,
                      uint8_t             *out);
size_t user_command__pack_to_buffer
                     (const UserCommand   *message,
                      ProtobufCBuffer     *buffer);
UserCommand *
       user_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_command__free_unpacked
                     (UserCommand *message,
                      ProtobufCAllocator *allocator);
/* CallCommand__Offer methods */
void   call_command__offer__init
                     (CallCommand__Offer         *message);
/* CallCommand__Answer methods */
void   call_command__answer__init
                     (CallCommand__Answer         *message);
/* CallCommand__IceUpdate methods */
void   call_command__ice_update__init
                     (CallCommand__IceUpdate         *message);
/* CallCommand__Busy methods */
void   call_command__busy__init
                     (CallCommand__Busy         *message);
/* CallCommand__Hangup methods */
void   call_command__hangup__init
                     (CallCommand__Hangup         *message);
/* CallCommand methods */
void   call_command__init
                     (CallCommand         *message);
size_t call_command__get_packed_size
                     (const CallCommand   *message);
size_t call_command__pack
                     (const CallCommand   *message,
                      uint8_t             *out);
size_t call_command__pack_to_buffer
                     (const CallCommand   *message,
                      ProtobufCBuffer     *buffer);
CallCommand *
       call_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   call_command__free_unpacked
                     (CallCommand *message,
                      ProtobufCAllocator *allocator);
/* FencesNearBy methods */
void   fences_near_by__init
                     (FencesNearBy         *message);
size_t fences_near_by__get_packed_size
                     (const FencesNearBy   *message);
size_t fences_near_by__pack
                     (const FencesNearBy   *message,
                      uint8_t             *out);
size_t fences_near_by__pack_to_buffer
                     (const FencesNearBy   *message,
                      ProtobufCBuffer     *buffer);
FencesNearBy *
       fences_near_by__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fences_near_by__free_unpacked
                     (FencesNearBy *message,
                      ProtobufCAllocator *allocator);
/* FencesSearch__SearchDescriptor methods */
void   fences_search__search_descriptor__init
                     (FencesSearch__SearchDescriptor         *message);
/* FencesSearch__RawResultRecord methods */
void   fences_search__raw_result_record__init
                     (FencesSearch__RawResultRecord         *message);
/* FencesSearch methods */
void   fences_search__init
                     (FencesSearch         *message);
size_t fences_search__get_packed_size
                     (const FencesSearch   *message);
size_t fences_search__pack
                     (const FencesSearch   *message,
                      uint8_t             *out);
size_t fences_search__pack_to_buffer
                     (const FencesSearch   *message,
                      ProtobufCBuffer     *buffer);
FencesSearch *
       fences_search__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fences_search__free_unpacked
                     (FencesSearch *message,
                      ProtobufCAllocator *allocator);
/* UfsrvCommandWire methods */
void   ufsrv_command_wire__init
                     (UfsrvCommandWire         *message);
size_t ufsrv_command_wire__get_packed_size
                     (const UfsrvCommandWire   *message);
size_t ufsrv_command_wire__pack
                     (const UfsrvCommandWire   *message,
                      uint8_t             *out);
size_t ufsrv_command_wire__pack_to_buffer
                     (const UfsrvCommandWire   *message,
                      ProtobufCBuffer     *buffer);
UfsrvCommandWire *
       ufsrv_command_wire__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ufsrv_command_wire__free_unpacked
                     (UfsrvCommandWire *message,
                      ProtobufCAllocator *allocator);
/* Envelope methods */
void   envelope__init
                     (Envelope         *message);
size_t envelope__get_packed_size
                     (const Envelope   *message);
size_t envelope__pack
                     (const Envelope   *message,
                      uint8_t             *out);
size_t envelope__pack_to_buffer
                     (const Envelope   *message,
                      ProtobufCBuffer     *buffer);
Envelope *
       envelope__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   envelope__free_unpacked
                     (Envelope *message,
                      ProtobufCAllocator *allocator);
/* Content methods */
void   content__init
                     (Content         *message);
size_t content__get_packed_size
                     (const Content   *message);
size_t content__pack
                     (const Content   *message,
                      uint8_t             *out);
size_t content__pack_to_buffer
                     (const Content   *message,
                      ProtobufCBuffer     *buffer);
Content *
       content__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   content__free_unpacked
                     (Content *message,
                      ProtobufCAllocator *allocator);
/* CallMessage__Offer methods */
void   call_message__offer__init
                     (CallMessage__Offer         *message);
/* CallMessage__Answer methods */
void   call_message__answer__init
                     (CallMessage__Answer         *message);
/* CallMessage__IceUpdate methods */
void   call_message__ice_update__init
                     (CallMessage__IceUpdate         *message);
/* CallMessage__Busy methods */
void   call_message__busy__init
                     (CallMessage__Busy         *message);
/* CallMessage__Hangup methods */
void   call_message__hangup__init
                     (CallMessage__Hangup         *message);
/* CallMessage methods */
void   call_message__init
                     (CallMessage         *message);
size_t call_message__get_packed_size
                     (const CallMessage   *message);
size_t call_message__pack
                     (const CallMessage   *message,
                      uint8_t             *out);
size_t call_message__pack_to_buffer
                     (const CallMessage   *message,
                      ProtobufCBuffer     *buffer);
CallMessage *
       call_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   call_message__free_unpacked
                     (CallMessage *message,
                      ProtobufCAllocator *allocator);
/* DataMessage__Quote__QuotedAttachment methods */
void   data_message__quote__quoted_attachment__init
                     (DataMessage__Quote__QuotedAttachment         *message);
/* DataMessage__Quote methods */
void   data_message__quote__init
                     (DataMessage__Quote         *message);
/* DataMessage__Contact__Name methods */
void   data_message__contact__name__init
                     (DataMessage__Contact__Name         *message);
/* DataMessage__Contact__Phone methods */
void   data_message__contact__phone__init
                     (DataMessage__Contact__Phone         *message);
/* DataMessage__Contact__Email methods */
void   data_message__contact__email__init
                     (DataMessage__Contact__Email         *message);
/* DataMessage__Contact__PostalAddress methods */
void   data_message__contact__postal_address__init
                     (DataMessage__Contact__PostalAddress         *message);
/* DataMessage__Contact__Avatar methods */
void   data_message__contact__avatar__init
                     (DataMessage__Contact__Avatar         *message);
/* DataMessage__Contact methods */
void   data_message__contact__init
                     (DataMessage__Contact         *message);
/* DataMessage__Preview methods */
void   data_message__preview__init
                     (DataMessage__Preview         *message);
/* DataMessage__Sticker methods */
void   data_message__sticker__init
                     (DataMessage__Sticker         *message);
/* DataMessage methods */
void   data_message__init
                     (DataMessage         *message);
size_t data_message__get_packed_size
                     (const DataMessage   *message);
size_t data_message__pack
                     (const DataMessage   *message,
                      uint8_t             *out);
size_t data_message__pack_to_buffer
                     (const DataMessage   *message,
                      ProtobufCBuffer     *buffer);
DataMessage *
       data_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   data_message__free_unpacked
                     (DataMessage *message,
                      ProtobufCAllocator *allocator);
/* NullMessage methods */
void   null_message__init
                     (NullMessage         *message);
size_t null_message__get_packed_size
                     (const NullMessage   *message);
size_t null_message__pack
                     (const NullMessage   *message,
                      uint8_t             *out);
size_t null_message__pack_to_buffer
                     (const NullMessage   *message,
                      ProtobufCBuffer     *buffer);
NullMessage *
       null_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   null_message__free_unpacked
                     (NullMessage *message,
                      ProtobufCAllocator *allocator);
/* ReceiptMessage methods */
void   receipt_message__init
                     (ReceiptMessage         *message);
size_t receipt_message__get_packed_size
                     (const ReceiptMessage   *message);
size_t receipt_message__pack
                     (const ReceiptMessage   *message,
                      uint8_t             *out);
size_t receipt_message__pack_to_buffer
                     (const ReceiptMessage   *message,
                      ProtobufCBuffer     *buffer);
ReceiptMessage *
       receipt_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   receipt_message__free_unpacked
                     (ReceiptMessage *message,
                      ProtobufCAllocator *allocator);
/* TypingMessage methods */
void   typing_message__init
                     (TypingMessage         *message);
size_t typing_message__get_packed_size
                     (const TypingMessage   *message);
size_t typing_message__pack
                     (const TypingMessage   *message,
                      uint8_t             *out);
size_t typing_message__pack_to_buffer
                     (const TypingMessage   *message,
                      ProtobufCBuffer     *buffer);
TypingMessage *
       typing_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   typing_message__free_unpacked
                     (TypingMessage *message,
                      ProtobufCAllocator *allocator);
/* Verified methods */
void   verified__init
                     (Verified         *message);
size_t verified__get_packed_size
                     (const Verified   *message);
size_t verified__pack
                     (const Verified   *message,
                      uint8_t             *out);
size_t verified__pack_to_buffer
                     (const Verified   *message,
                      ProtobufCBuffer     *buffer);
Verified *
       verified__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   verified__free_unpacked
                     (Verified *message,
                      ProtobufCAllocator *allocator);
/* SyncMessage__Sent methods */
void   sync_message__sent__init
                     (SyncMessage__Sent         *message);
/* SyncMessage__Contacts methods */
void   sync_message__contacts__init
                     (SyncMessage__Contacts         *message);
/* SyncMessage__Groups methods */
void   sync_message__groups__init
                     (SyncMessage__Groups         *message);
/* SyncMessage__Blocked methods */
void   sync_message__blocked__init
                     (SyncMessage__Blocked         *message);
/* SyncMessage__Request methods */
void   sync_message__request__init
                     (SyncMessage__Request         *message);
/* SyncMessage__Read methods */
void   sync_message__read__init
                     (SyncMessage__Read         *message);
/* SyncMessage__Configuration methods */
void   sync_message__configuration__init
                     (SyncMessage__Configuration         *message);
/* SyncMessage__StickerPackOperation methods */
void   sync_message__sticker_pack_operation__init
                     (SyncMessage__StickerPackOperation         *message);
/* SyncMessage methods */
void   sync_message__init
                     (SyncMessage         *message);
size_t sync_message__get_packed_size
                     (const SyncMessage   *message);
size_t sync_message__pack
                     (const SyncMessage   *message,
                      uint8_t             *out);
size_t sync_message__pack_to_buffer
                     (const SyncMessage   *message,
                      ProtobufCBuffer     *buffer);
SyncMessage *
       sync_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sync_message__free_unpacked
                     (SyncMessage *message,
                      ProtobufCAllocator *allocator);
/* AttachmentPointer methods */
void   attachment_pointer__init
                     (AttachmentPointer         *message);
size_t attachment_pointer__get_packed_size
                     (const AttachmentPointer   *message);
size_t attachment_pointer__pack
                     (const AttachmentPointer   *message,
                      uint8_t             *out);
size_t attachment_pointer__pack_to_buffer
                     (const AttachmentPointer   *message,
                      ProtobufCBuffer     *buffer);
AttachmentPointer *
       attachment_pointer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   attachment_pointer__free_unpacked
                     (AttachmentPointer *message,
                      ProtobufCAllocator *allocator);
/* GroupContext methods */
void   group_context__init
                     (GroupContext         *message);
size_t group_context__get_packed_size
                     (const GroupContext   *message);
size_t group_context__pack
                     (const GroupContext   *message,
                      uint8_t             *out);
size_t group_context__pack_to_buffer
                     (const GroupContext   *message,
                      ProtobufCBuffer     *buffer);
GroupContext *
       group_context__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   group_context__free_unpacked
                     (GroupContext *message,
                      ProtobufCAllocator *allocator);
/* ContactDetails__Avatar methods */
void   contact_details__avatar__init
                     (ContactDetails__Avatar         *message);
/* ContactDetails methods */
void   contact_details__init
                     (ContactDetails         *message);
size_t contact_details__get_packed_size
                     (const ContactDetails   *message);
size_t contact_details__pack
                     (const ContactDetails   *message,
                      uint8_t             *out);
size_t contact_details__pack_to_buffer
                     (const ContactDetails   *message,
                      ProtobufCBuffer     *buffer);
ContactDetails *
       contact_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   contact_details__free_unpacked
                     (ContactDetails *message,
                      ProtobufCAllocator *allocator);
/* GroupDetails__Avatar methods */
void   group_details__avatar__init
                     (GroupDetails__Avatar         *message);
/* GroupDetails methods */
void   group_details__init
                     (GroupDetails         *message);
size_t group_details__get_packed_size
                     (const GroupDetails   *message);
size_t group_details__pack
                     (const GroupDetails   *message,
                      uint8_t             *out);
size_t group_details__pack_to_buffer
                     (const GroupDetails   *message,
                      ProtobufCBuffer     *buffer);
GroupDetails *
       group_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   group_details__free_unpacked
                     (GroupDetails *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CommandHeader_Closure)
                 (const CommandHeader *message,
                  void *closure_data);
typedef void (*LocationRecord_Closure)
                 (const LocationRecord *message,
                  void *closure_data);
typedef void (*UserRecord_Closure)
                 (const UserRecord *message,
                  void *closure_data);
typedef void (*AttachmentRecord_Closure)
                 (const AttachmentRecord *message,
                  void *closure_data);
typedef void (*FenceRecord__Permission_Closure)
                 (const FenceRecord__Permission *message,
                  void *closure_data);
typedef void (*FenceRecord_Closure)
                 (const FenceRecord *message,
                  void *closure_data);
typedef void (*QuotedMessageRecord__QuotedAttachment_Closure)
                 (const QuotedMessageRecord__QuotedAttachment *message,
                  void *closure_data);
typedef void (*QuotedMessageRecord_Closure)
                 (const QuotedMessageRecord *message,
                  void *closure_data);
typedef void (*PreviewRecord_Closure)
                 (const PreviewRecord *message,
                  void *closure_data);
typedef void (*StickerRecord_Closure)
                 (const StickerRecord *message,
                  void *closure_data);
typedef void (*MessageRecord_Closure)
                 (const MessageRecord *message,
                  void *closure_data);
typedef void (*ContactRecord__Name_Closure)
                 (const ContactRecord__Name *message,
                  void *closure_data);
typedef void (*ContactRecord__Phone_Closure)
                 (const ContactRecord__Phone *message,
                  void *closure_data);
typedef void (*ContactRecord__Email_Closure)
                 (const ContactRecord__Email *message,
                  void *closure_data);
typedef void (*ContactRecord__PostalAddress_Closure)
                 (const ContactRecord__PostalAddress *message,
                  void *closure_data);
typedef void (*ContactRecord__Avatar_Closure)
                 (const ContactRecord__Avatar *message,
                  void *closure_data);
typedef void (*ContactRecord_Closure)
                 (const ContactRecord *message,
                  void *closure_data);
typedef void (*ReceiptCommand_Closure)
                 (const ReceiptCommand *message,
                  void *closure_data);
typedef void (*FenceCommand_Closure)
                 (const FenceCommand *message,
                  void *closure_data);
typedef void (*LocationCommand_Closure)
                 (const LocationCommand *message,
                  void *closure_data);
typedef void (*MessageCommand_Closure)
                 (const MessageCommand *message,
                  void *closure_data);
typedef void (*SyncCommand_Closure)
                 (const SyncCommand *message,
                  void *closure_data);
typedef void (*UserPreference_Closure)
                 (const UserPreference *message,
                  void *closure_data);
typedef void (*FenceUserPreference_Closure)
                 (const FenceUserPreference *message,
                  void *closure_data);
typedef void (*UserCommand_Closure)
                 (const UserCommand *message,
                  void *closure_data);
typedef void (*CallCommand__Offer_Closure)
                 (const CallCommand__Offer *message,
                  void *closure_data);
typedef void (*CallCommand__Answer_Closure)
                 (const CallCommand__Answer *message,
                  void *closure_data);
typedef void (*CallCommand__IceUpdate_Closure)
                 (const CallCommand__IceUpdate *message,
                  void *closure_data);
typedef void (*CallCommand__Busy_Closure)
                 (const CallCommand__Busy *message,
                  void *closure_data);
typedef void (*CallCommand__Hangup_Closure)
                 (const CallCommand__Hangup *message,
                  void *closure_data);
typedef void (*CallCommand_Closure)
                 (const CallCommand *message,
                  void *closure_data);
typedef void (*FencesNearBy_Closure)
                 (const FencesNearBy *message,
                  void *closure_data);
typedef void (*FencesSearch__SearchDescriptor_Closure)
                 (const FencesSearch__SearchDescriptor *message,
                  void *closure_data);
typedef void (*FencesSearch__RawResultRecord_Closure)
                 (const FencesSearch__RawResultRecord *message,
                  void *closure_data);
typedef void (*FencesSearch_Closure)
                 (const FencesSearch *message,
                  void *closure_data);
typedef void (*UfsrvCommandWire_Closure)
                 (const UfsrvCommandWire *message,
                  void *closure_data);
typedef void (*Envelope_Closure)
                 (const Envelope *message,
                  void *closure_data);
typedef void (*Content_Closure)
                 (const Content *message,
                  void *closure_data);
typedef void (*CallMessage__Offer_Closure)
                 (const CallMessage__Offer *message,
                  void *closure_data);
typedef void (*CallMessage__Answer_Closure)
                 (const CallMessage__Answer *message,
                  void *closure_data);
typedef void (*CallMessage__IceUpdate_Closure)
                 (const CallMessage__IceUpdate *message,
                  void *closure_data);
typedef void (*CallMessage__Busy_Closure)
                 (const CallMessage__Busy *message,
                  void *closure_data);
typedef void (*CallMessage__Hangup_Closure)
                 (const CallMessage__Hangup *message,
                  void *closure_data);
typedef void (*CallMessage_Closure)
                 (const CallMessage *message,
                  void *closure_data);
typedef void (*DataMessage__Quote__QuotedAttachment_Closure)
                 (const DataMessage__Quote__QuotedAttachment *message,
                  void *closure_data);
typedef void (*DataMessage__Quote_Closure)
                 (const DataMessage__Quote *message,
                  void *closure_data);
typedef void (*DataMessage__Contact__Name_Closure)
                 (const DataMessage__Contact__Name *message,
                  void *closure_data);
typedef void (*DataMessage__Contact__Phone_Closure)
                 (const DataMessage__Contact__Phone *message,
                  void *closure_data);
typedef void (*DataMessage__Contact__Email_Closure)
                 (const DataMessage__Contact__Email *message,
                  void *closure_data);
typedef void (*DataMessage__Contact__PostalAddress_Closure)
                 (const DataMessage__Contact__PostalAddress *message,
                  void *closure_data);
typedef void (*DataMessage__Contact__Avatar_Closure)
                 (const DataMessage__Contact__Avatar *message,
                  void *closure_data);
typedef void (*DataMessage__Contact_Closure)
                 (const DataMessage__Contact *message,
                  void *closure_data);
typedef void (*DataMessage__Preview_Closure)
                 (const DataMessage__Preview *message,
                  void *closure_data);
typedef void (*DataMessage__Sticker_Closure)
                 (const DataMessage__Sticker *message,
                  void *closure_data);
typedef void (*DataMessage_Closure)
                 (const DataMessage *message,
                  void *closure_data);
typedef void (*NullMessage_Closure)
                 (const NullMessage *message,
                  void *closure_data);
typedef void (*ReceiptMessage_Closure)
                 (const ReceiptMessage *message,
                  void *closure_data);
typedef void (*TypingMessage_Closure)
                 (const TypingMessage *message,
                  void *closure_data);
typedef void (*Verified_Closure)
                 (const Verified *message,
                  void *closure_data);
typedef void (*SyncMessage__Sent_Closure)
                 (const SyncMessage__Sent *message,
                  void *closure_data);
typedef void (*SyncMessage__Contacts_Closure)
                 (const SyncMessage__Contacts *message,
                  void *closure_data);
typedef void (*SyncMessage__Groups_Closure)
                 (const SyncMessage__Groups *message,
                  void *closure_data);
typedef void (*SyncMessage__Blocked_Closure)
                 (const SyncMessage__Blocked *message,
                  void *closure_data);
typedef void (*SyncMessage__Request_Closure)
                 (const SyncMessage__Request *message,
                  void *closure_data);
typedef void (*SyncMessage__Read_Closure)
                 (const SyncMessage__Read *message,
                  void *closure_data);
typedef void (*SyncMessage__Configuration_Closure)
                 (const SyncMessage__Configuration *message,
                  void *closure_data);
typedef void (*SyncMessage__StickerPackOperation_Closure)
                 (const SyncMessage__StickerPackOperation *message,
                  void *closure_data);
typedef void (*SyncMessage_Closure)
                 (const SyncMessage *message,
                  void *closure_data);
typedef void (*AttachmentPointer_Closure)
                 (const AttachmentPointer *message,
                  void *closure_data);
typedef void (*GroupContext_Closure)
                 (const GroupContext *message,
                  void *closure_data);
typedef void (*ContactDetails__Avatar_Closure)
                 (const ContactDetails__Avatar *message,
                  void *closure_data);
typedef void (*ContactDetails_Closure)
                 (const ContactDetails *message,
                  void *closure_data);
typedef void (*GroupDetails__Avatar_Closure)
                 (const GroupDetails__Avatar *message,
                  void *closure_data);
typedef void (*GroupDetails_Closure)
                 (const GroupDetails *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    command_args__descriptor;
extern const ProtobufCEnumDescriptor    preference_type__descriptor;
extern const ProtobufCEnumDescriptor    user_prefs__descriptor;
extern const ProtobufCEnumDescriptor    fence_user_prefs__descriptor;
extern const ProtobufCEnumDescriptor    unsolicited_contact_action__descriptor;
extern const ProtobufCMessageDescriptor command_header__descriptor;
extern const ProtobufCMessageDescriptor location_record__descriptor;
extern const ProtobufCEnumDescriptor    location_record__source__descriptor;
extern const ProtobufCMessageDescriptor user_record__descriptor;
extern const ProtobufCEnumDescriptor    user_record__net_state__descriptor;
extern const ProtobufCEnumDescriptor    user_record__availability_state__descriptor;
extern const ProtobufCEnumDescriptor    user_record__activity_state__descriptor;
extern const ProtobufCMessageDescriptor attachment_record__descriptor;
extern const ProtobufCEnumDescriptor    attachment_record__flags__descriptor;
extern const ProtobufCMessageDescriptor fence_record__descriptor;
extern const ProtobufCMessageDescriptor fence_record__permission__descriptor;
extern const ProtobufCEnumDescriptor    fence_record__permission__type__descriptor;
extern const ProtobufCEnumDescriptor    fence_record__permission__list_semantics__descriptor;
extern const ProtobufCEnumDescriptor    fence_record__fence_type__descriptor;
extern const ProtobufCEnumDescriptor    fence_record__privacy_mode__descriptor;
extern const ProtobufCEnumDescriptor    fence_record__delivery_mode__descriptor;
extern const ProtobufCEnumDescriptor    fence_record__join_mode__descriptor;
extern const ProtobufCEnumDescriptor    fence_record__longevity_mode__descriptor;
extern const ProtobufCMessageDescriptor quoted_message_record__descriptor;
extern const ProtobufCMessageDescriptor quoted_message_record__quoted_attachment__descriptor;
extern const ProtobufCMessageDescriptor preview_record__descriptor;
extern const ProtobufCMessageDescriptor sticker_record__descriptor;
extern const ProtobufCMessageDescriptor message_record__descriptor;
extern const ProtobufCMessageDescriptor contact_record__descriptor;
extern const ProtobufCMessageDescriptor contact_record__name__descriptor;
extern const ProtobufCMessageDescriptor contact_record__phone__descriptor;
extern const ProtobufCEnumDescriptor    contact_record__phone__type__descriptor;
extern const ProtobufCMessageDescriptor contact_record__email__descriptor;
extern const ProtobufCEnumDescriptor    contact_record__email__type__descriptor;
extern const ProtobufCMessageDescriptor contact_record__postal_address__descriptor;
extern const ProtobufCEnumDescriptor    contact_record__postal_address__type__descriptor;
extern const ProtobufCMessageDescriptor contact_record__avatar__descriptor;
extern const ProtobufCMessageDescriptor receipt_command__descriptor;
extern const ProtobufCEnumDescriptor    receipt_command__command_types__descriptor;
extern const ProtobufCEnumDescriptor    receipt_command__errors__descriptor;
extern const ProtobufCMessageDescriptor fence_command__descriptor;
extern const ProtobufCEnumDescriptor    fence_command__command_types__descriptor;
extern const ProtobufCEnumDescriptor    fence_command__errors__descriptor;
extern const ProtobufCMessageDescriptor location_command__descriptor;
extern const ProtobufCEnumDescriptor    location_command__command_types__descriptor;
extern const ProtobufCMessageDescriptor message_command__descriptor;
extern const ProtobufCEnumDescriptor    message_command__command_types__descriptor;
extern const ProtobufCEnumDescriptor    message_command__errors__descriptor;
extern const ProtobufCEnumDescriptor    message_command__protocol_type__descriptor;
extern const ProtobufCMessageDescriptor sync_command__descriptor;
extern const ProtobufCEnumDescriptor    sync_command__command_types__descriptor;
extern const ProtobufCEnumDescriptor    sync_command__command_args__descriptor;
extern const ProtobufCMessageDescriptor user_preference__descriptor;
extern const ProtobufCMessageDescriptor fence_user_preference__descriptor;
extern const ProtobufCMessageDescriptor user_command__descriptor;
extern const ProtobufCEnumDescriptor    user_command__command_types__descriptor;
extern const ProtobufCEnumDescriptor    user_command__share_type__descriptor;
extern const ProtobufCEnumDescriptor    user_command__errors__descriptor;
extern const ProtobufCMessageDescriptor call_command__descriptor;
extern const ProtobufCMessageDescriptor call_command__offer__descriptor;
extern const ProtobufCMessageDescriptor call_command__answer__descriptor;
extern const ProtobufCMessageDescriptor call_command__ice_update__descriptor;
extern const ProtobufCMessageDescriptor call_command__busy__descriptor;
extern const ProtobufCMessageDescriptor call_command__hangup__descriptor;
extern const ProtobufCEnumDescriptor    call_command__command_types__descriptor;
extern const ProtobufCEnumDescriptor    call_command__errors__descriptor;
extern const ProtobufCMessageDescriptor fences_near_by__descriptor;
extern const ProtobufCMessageDescriptor fences_search__descriptor;
extern const ProtobufCMessageDescriptor fences_search__search_descriptor__descriptor;
extern const ProtobufCMessageDescriptor fences_search__raw_result_record__descriptor;
extern const ProtobufCEnumDescriptor    fences_search__type__descriptor;
extern const ProtobufCEnumDescriptor    fences_search__format__descriptor;
extern const ProtobufCMessageDescriptor ufsrv_command_wire__descriptor;
extern const ProtobufCEnumDescriptor    ufsrv_command_wire__ufsrv_type__descriptor;
extern const ProtobufCMessageDescriptor envelope__descriptor;
extern const ProtobufCEnumDescriptor    envelope__type__descriptor;
extern const ProtobufCMessageDescriptor content__descriptor;
extern const ProtobufCMessageDescriptor call_message__descriptor;
extern const ProtobufCMessageDescriptor call_message__offer__descriptor;
extern const ProtobufCMessageDescriptor call_message__answer__descriptor;
extern const ProtobufCMessageDescriptor call_message__ice_update__descriptor;
extern const ProtobufCMessageDescriptor call_message__busy__descriptor;
extern const ProtobufCMessageDescriptor call_message__hangup__descriptor;
extern const ProtobufCMessageDescriptor data_message__descriptor;
extern const ProtobufCMessageDescriptor data_message__quote__descriptor;
extern const ProtobufCMessageDescriptor data_message__quote__quoted_attachment__descriptor;
extern const ProtobufCMessageDescriptor data_message__contact__descriptor;
extern const ProtobufCMessageDescriptor data_message__contact__name__descriptor;
extern const ProtobufCMessageDescriptor data_message__contact__phone__descriptor;
extern const ProtobufCEnumDescriptor    data_message__contact__phone__type__descriptor;
extern const ProtobufCMessageDescriptor data_message__contact__email__descriptor;
extern const ProtobufCEnumDescriptor    data_message__contact__email__type__descriptor;
extern const ProtobufCMessageDescriptor data_message__contact__postal_address__descriptor;
extern const ProtobufCEnumDescriptor    data_message__contact__postal_address__type__descriptor;
extern const ProtobufCMessageDescriptor data_message__contact__avatar__descriptor;
extern const ProtobufCMessageDescriptor data_message__preview__descriptor;
extern const ProtobufCMessageDescriptor data_message__sticker__descriptor;
extern const ProtobufCEnumDescriptor    data_message__flags__descriptor;
extern const ProtobufCMessageDescriptor null_message__descriptor;
extern const ProtobufCMessageDescriptor receipt_message__descriptor;
extern const ProtobufCEnumDescriptor    receipt_message__type__descriptor;
extern const ProtobufCMessageDescriptor typing_message__descriptor;
extern const ProtobufCEnumDescriptor    typing_message__action__descriptor;
extern const ProtobufCMessageDescriptor verified__descriptor;
extern const ProtobufCEnumDescriptor    verified__state__descriptor;
extern const ProtobufCMessageDescriptor sync_message__descriptor;
extern const ProtobufCMessageDescriptor sync_message__sent__descriptor;
extern const ProtobufCMessageDescriptor sync_message__contacts__descriptor;
extern const ProtobufCMessageDescriptor sync_message__groups__descriptor;
extern const ProtobufCMessageDescriptor sync_message__blocked__descriptor;
extern const ProtobufCMessageDescriptor sync_message__request__descriptor;
extern const ProtobufCEnumDescriptor    sync_message__request__type__descriptor;
extern const ProtobufCMessageDescriptor sync_message__read__descriptor;
extern const ProtobufCMessageDescriptor sync_message__configuration__descriptor;
extern const ProtobufCMessageDescriptor sync_message__sticker_pack_operation__descriptor;
extern const ProtobufCEnumDescriptor    sync_message__sticker_pack_operation__type__descriptor;
extern const ProtobufCMessageDescriptor attachment_pointer__descriptor;
extern const ProtobufCEnumDescriptor    attachment_pointer__flags__descriptor;
extern const ProtobufCMessageDescriptor group_context__descriptor;
extern const ProtobufCEnumDescriptor    group_context__type__descriptor;
extern const ProtobufCMessageDescriptor contact_details__descriptor;
extern const ProtobufCMessageDescriptor contact_details__avatar__descriptor;
extern const ProtobufCMessageDescriptor group_details__descriptor;
extern const ProtobufCMessageDescriptor group_details__avatar__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_SignalService_2eproto__INCLUDED */
